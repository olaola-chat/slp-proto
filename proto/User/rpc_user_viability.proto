syntax = "proto3";
package pb;
/*
user.viability rpc 协议
*/

option go_package = "../app/pb";

//获取用户的活跃值和奖励领取情况
message ReqUserViability {
	uint32 uid = 1;
	uint32 subAppId = 2;
}

message UserViabilityData {
	uint32 viability = 1;
	uint32 drawed = 2;
	map<uint32, uint32> additions = 3;
}

message RepUserViability {
	bool success = 1;
    string msg = 2;
	UserViabilityData data = 3;
}

//获取一批用户的活跃值和奖励领取情况
message ReqUsersViability {
	repeated uint32 uids = 1;
	uint32 subAppId = 2;
}

message RepUsersViability {
	bool success = 1;
    string msg = 2;
	map<uint32, UserViabilityData> data = 3;
}

//获取用户的活跃值等级
message ReqUserViabilityLevel {
	uint32 uid = 1;
	uint32 subAppId = 2;
}

message UserViabilityLevelData {
	int32 main_level = 1;   // 大等级
	int32 sub_level = 2;	 // 小等级
	string title = 3;        // 大等级称号
	bool award = 4;			 // 是否有奖励可以领取
}

message RepUserViabilityLevel {
	bool success = 1;
    string msg = 2;
	UserViabilityLevelData data = 3;
}

//增加用户的活跃值
message ReqAddUserViability {
	uint32 uid = 1;			
	uint32 viability = 2;		// 增加的活跃值
	int32 type = 3;			// 场景
	string reaseon = 4;		// 日志记录
	uint32 subAppId = 5;
}

message RepAddUserViability {
	bool success = 1;   
	string msg = 2;
}

enum GameToolType {
	GameToolNone = 0; 
	GameToolMarker = 1;  // 记牌器
	GameToolTetris = 2;  // 俄罗斯方块
}

//获取用户的活跃值和奖励领取情况
message ReqUserGameInfo {
	uint32 uid = 1;
	GameToolType type = 2;   // 游戏道具类型
}

//记牌器信息
message MarkerInfo{
	bool  has_mark = 1;
}

//俄罗斯方块
message TetrisInfo{
  int32 max_free_times_one_day1 = 1;
  int32 max_free_times_one_day2 = 2;
  repeated uint32 unlocked_skins = 3;
}

message RepUserGameInfo {
  bool success = 1;
  string msg = 2;
  int32 level = 3;
  oneof data{
    MarkerInfo markerInfo = 4;
    TetrisInfo  tetrisInfo = 5;
  }
}

//获取用户的活跃值和奖励领取情况
message ReqUserHasMarker {
	uint32 uid = 1;
}

message RepUserHasMarker {
	bool success = 1;   
	string msg = 2;
	bool data = 3; 		// 是否有记牌器
}

message ReqIsOfficialAccount{
	uint32 uid = 1;
}

message RepIsOfficialAccount {
	bool isOfficialAccount = 1;
}

service RPCUserViabilitys {
	rpc QueryUserViability (ReqUserViability) returns (RepUserViability);
	rpc BatchQueryUserViability (ReqUsersViability) returns (RepUsersViability);
	rpc QueryUserViabilityLevel (ReqUserViabilityLevel) returns (RepUserViabilityLevel);
	rpc AddUserViability (ReqAddUserViability) returns (RepAddUserViability);
	rpc QueryUserHasMarker (ReqUserHasMarker) returns (RepUserHasMarker);
	rpc QueryUserGameInfo (ReqUserGameInfo) returns (RepUserGameInfo);
	rpc IsOfficialAccount (ReqIsOfficialAccount) returns (RepIsOfficialAccount);
  }
