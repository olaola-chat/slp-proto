// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: rpc/consume/consume_money_message.proto

package consume

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 错误码
type ErrorCode int32

const (
	ErrorCode_ok                         ErrorCode = 0  //成功
	ErrorCode_param_error                ErrorCode = 1  //参数错误
	ErrorCode_mysql_error                ErrorCode = 2  //数据库错误
	ErrorCode_get_lock_failed            ErrorCode = 3  //加锁失败
	ErrorCode_request_repeated           ErrorCode = 4  //请求重复
	ErrorCode_not_enough                 ErrorCode = 5  //余额不足
	ErrorCode_internal_error             ErrorCode = 6  //服务内部错误
	ErrorCode_cannot_punish              ErrorCode = 7  //不符合罚款执行标准
	ErrorCode_no_punish                  ErrorCode = 8  //未被处罚过，无法退款
	ErrorCode_punish_back_money_error    ErrorCode = 9  //罚款退还金额错误
	ErrorCode_no_commodity               ErrorCode = 10 //物品不存在
	ErrorCode_redis_error                ErrorCode = 11 //redis错误
	ErrorCode_commodity_cannot_decompose ErrorCode = 12 //物品不能分解
	ErrorCode_commodity_not_enough       ErrorCode = 18 //物品不足
	ErrorCode_no_user                    ErrorCode = 19 //用户不存在
	ErrorCode_request_limited            ErrorCode = 20 //请求量受限
	ErrorCode_redis_lock_failed          ErrorCode = 21 //redis锁失败
	ErrorCode_todo_deleted               ErrorCode = 22 //todo已删除
	ErrorCode_commodity_use_wrong_type   ErrorCode = 23 //物品使用类型错误
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ok",
		1:  "param_error",
		2:  "mysql_error",
		3:  "get_lock_failed",
		4:  "request_repeated",
		5:  "not_enough",
		6:  "internal_error",
		7:  "cannot_punish",
		8:  "no_punish",
		9:  "punish_back_money_error",
		10: "no_commodity",
		11: "redis_error",
		12: "commodity_cannot_decompose",
		18: "commodity_not_enough",
		19: "no_user",
		20: "request_limited",
		21: "redis_lock_failed",
		22: "todo_deleted",
		23: "commodity_use_wrong_type",
	}
	ErrorCode_value = map[string]int32{
		"ok":                         0,
		"param_error":                1,
		"mysql_error":                2,
		"get_lock_failed":            3,
		"request_repeated":           4,
		"not_enough":                 5,
		"internal_error":             6,
		"cannot_punish":              7,
		"no_punish":                  8,
		"punish_back_money_error":    9,
		"no_commodity":               10,
		"redis_error":                11,
		"commodity_cannot_decompose": 12,
		"commodity_not_enough":       18,
		"no_user":                    19,
		"request_limited":            20,
		"redis_lock_failed":          21,
		"todo_deleted":               22,
		"commodity_use_wrong_type":   23,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_consume_consume_money_message_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_rpc_consume_consume_money_message_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{0}
}

// 场景类型
type ConsumeType int32

const (
	ConsumeType_no_ctype                ConsumeType = 0
	ConsumeType_test_dec                ConsumeType = 1  //测试金额减少
	ConsumeType_test_consume            ConsumeType = 2  //测试消费
	ConsumeType_test_income             ConsumeType = 3  //测试收入
	ConsumeType_give                    ConsumeType = 10 //后台发钱
	ConsumeType_wages                   ConsumeType = 11 //房主分成奖励
	ConsumeType_admin_coin              ConsumeType = 12 //系统奖励金币
	ConsumeType_recall                  ConsumeType = 13 //召回用户奖励发放
	ConsumeType_exchange                ConsumeType = 14 //任务中心奖券兑换
	ConsumeType_punish                  ConsumeType = 15 //罚款通知
	ConsumeType_freeze_punish           ConsumeType = 16 //冻结通知
	ConsumeType_punish_process          ConsumeType = 17 //罚款执行
	ConsumeType_punish_back             ConsumeType = 18 //罚款退还
	ConsumeType_commodity_send          ConsumeType = 19 //物品发放
	ConsumeType_commodity_buy           ConsumeType = 20 //物品购买
	ConsumeType_punish_pack_cal         ConsumeType = 22 //罚没违规收入
	ConsumeType_collect                 ConsumeType = 23 //资金归集转出
	ConsumeType_pack_cal                ConsumeType = 25 //打包结算
	ConsumeType_mood_share_out          ConsumeType = 27 //公会长分配人气
	ConsumeType_mood_share_in           ConsumeType = 28 //收到公会长人气分配
	ConsumeType_mood_share_back         ConsumeType = 29 //分配人气失败退还
	ConsumeType_cash                    ConsumeType = 30 //公会成员申请提现
	ConsumeType_cash_back               ConsumeType = 31 //公会成员提现失败退还
	ConsumeType_cash_back_pack_cal      ConsumeType = 32 //公司打款失败退还
	ConsumeType_cash_back_income        ConsumeType = 33 //手续费清算返还
	ConsumeType_invite_award            ConsumeType = 34 //邀请奖励物品
	ConsumeType_commodity_use           ConsumeType = 35 //使用背包物品
	ConsumeType_open_box_income         ConsumeType = 36 //凶手开启宝箱奖励
	ConsumeType_lottery                 ConsumeType = 37 //凶手抽奖
	ConsumeType_lottery_income          ConsumeType = 38 //凶手抽奖阶段奖励
	ConsumeType_lucky_gift              ConsumeType = 39 //凶手幸运礼物
	ConsumeType_lucky_gift_prize        ConsumeType = 41 //凶手幸运礼物中奖
	ConsumeType_sign_award              ConsumeType = 42 //任务中心签到奖励
	ConsumeType_lucky_bag_send          ConsumeType = 43 //凶手发福袋
	ConsumeType_lucky_bag_grab          ConsumeType = 44 //凶手抢福袋
	ConsumeType_lucky_bag_back          ConsumeType = 45 //凶手福袋退还
	ConsumeType_good_voice              ConsumeType = 46 //凶手好声音送礼
	ConsumeType_commodity_consume       ConsumeType = 47 //物品消费
	ConsumeType_room_gift               ConsumeType = 48 //房间礼物
	ConsumeType_room_box_gift           ConsumeType = 49 //房间礼盒礼物
	ConsumeType_room_defend             ConsumeType = 50 //房间守护
	ConsumeType_agent_share_income      ConsumeType = 51 //经纪人分成
	ConsumeType_mentor_income           ConsumeType = 52 //师徒奖励
	ConsumeType_use_header              ConsumeType = 53 //使用头像框
	ConsumeType_chat_gift               ConsumeType = 54 //私聊礼物
	ConsumeType_chat_box_gift           ConsumeType = 55 //私聊礼盒礼物
	ConsumeType_chat_defend             ConsumeType = 56 //私聊守护
	ConsumeType_open_box                ConsumeType = 57 //开箱子
	ConsumeType_custom_share            ConsumeType = 58 //自定义分成
	ConsumeType_activity_redpacket_send ConsumeType = 59 //发活动红包
	ConsumeType_activity_redpacket_grab ConsumeType = 60 //抢活动红包
	ConsumeType_activity_redpacket_back ConsumeType = 61 //活动红包退还
	ConsumeType_redpacket_send          ConsumeType = 62 //发红包
	ConsumeType_redpacket_grab          ConsumeType = 63 //抢红包
	ConsumeType_redpacket_back          ConsumeType = 64 //红包退还
	ConsumeType_lottery_common          ConsumeType = 65 //通用抽奖
	ConsumeType_consume_common          ConsumeType = 67 //通用消费
	ConsumeType_commodity_decompose     ConsumeType = 68 //物品分解
)

// Enum value maps for ConsumeType.
var (
	ConsumeType_name = map[int32]string{
		0:  "no_ctype",
		1:  "test_dec",
		2:  "test_consume",
		3:  "test_income",
		10: "give",
		11: "wages",
		12: "admin_coin",
		13: "recall",
		14: "exchange",
		15: "punish",
		16: "freeze_punish",
		17: "punish_process",
		18: "punish_back",
		19: "commodity_send",
		20: "commodity_buy",
		22: "punish_pack_cal",
		23: "collect",
		25: "pack_cal",
		27: "mood_share_out",
		28: "mood_share_in",
		29: "mood_share_back",
		30: "cash",
		31: "cash_back",
		32: "cash_back_pack_cal",
		33: "cash_back_income",
		34: "invite_award",
		35: "commodity_use",
		36: "open_box_income",
		37: "lottery",
		38: "lottery_income",
		39: "lucky_gift",
		41: "lucky_gift_prize",
		42: "sign_award",
		43: "lucky_bag_send",
		44: "lucky_bag_grab",
		45: "lucky_bag_back",
		46: "good_voice",
		47: "commodity_consume",
		48: "room_gift",
		49: "room_box_gift",
		50: "room_defend",
		51: "agent_share_income",
		52: "mentor_income",
		53: "use_header",
		54: "chat_gift",
		55: "chat_box_gift",
		56: "chat_defend",
		57: "open_box",
		58: "custom_share",
		59: "activity_redpacket_send",
		60: "activity_redpacket_grab",
		61: "activity_redpacket_back",
		62: "redpacket_send",
		63: "redpacket_grab",
		64: "redpacket_back",
		65: "lottery_common",
		67: "consume_common",
		68: "commodity_decompose",
	}
	ConsumeType_value = map[string]int32{
		"no_ctype":                0,
		"test_dec":                1,
		"test_consume":            2,
		"test_income":             3,
		"give":                    10,
		"wages":                   11,
		"admin_coin":              12,
		"recall":                  13,
		"exchange":                14,
		"punish":                  15,
		"freeze_punish":           16,
		"punish_process":          17,
		"punish_back":             18,
		"commodity_send":          19,
		"commodity_buy":           20,
		"punish_pack_cal":         22,
		"collect":                 23,
		"pack_cal":                25,
		"mood_share_out":          27,
		"mood_share_in":           28,
		"mood_share_back":         29,
		"cash":                    30,
		"cash_back":               31,
		"cash_back_pack_cal":      32,
		"cash_back_income":        33,
		"invite_award":            34,
		"commodity_use":           35,
		"open_box_income":         36,
		"lottery":                 37,
		"lottery_income":          38,
		"lucky_gift":              39,
		"lucky_gift_prize":        41,
		"sign_award":              42,
		"lucky_bag_send":          43,
		"lucky_bag_grab":          44,
		"lucky_bag_back":          45,
		"good_voice":              46,
		"commodity_consume":       47,
		"room_gift":               48,
		"room_box_gift":           49,
		"room_defend":             50,
		"agent_share_income":      51,
		"mentor_income":           52,
		"use_header":              53,
		"chat_gift":               54,
		"chat_box_gift":           55,
		"chat_defend":             56,
		"open_box":                57,
		"custom_share":            58,
		"activity_redpacket_send": 59,
		"activity_redpacket_grab": 60,
		"activity_redpacket_back": 61,
		"redpacket_send":          62,
		"redpacket_grab":          63,
		"redpacket_back":          64,
		"lottery_common":          65,
		"consume_common":          67,
		"commodity_decompose":     68,
	}
)

func (x ConsumeType) Enum() *ConsumeType {
	p := new(ConsumeType)
	*p = x
	return p
}

func (x ConsumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_consume_consume_money_message_proto_enumTypes[1].Descriptor()
}

func (ConsumeType) Type() protoreflect.EnumType {
	return &file_rpc_consume_consume_money_message_proto_enumTypes[1]
}

func (x ConsumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsumeType.Descriptor instead.
func (ConsumeType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{1}
}

// 金额类型
type MoneyType int32

const (
	MoneyType_no_mtype      MoneyType = 0
	MoneyType_money         MoneyType = 1 //平台币
	MoneyType_money_b       MoneyType = 2 //平台币
	MoneyType_money_order   MoneyType = 3 //平台币
	MoneyType_money_order_b MoneyType = 4 //平台币
	MoneyType_money_cash    MoneyType = 5 //公会魅力值
	MoneyType_money_cash_b  MoneyType = 6 //个人魅力值
	MoneyType_gold_coin     MoneyType = 7 //金币
	MoneyType_money_coupon  MoneyType = 8 //金豆
	MoneyType_max_mtype     MoneyType = 9
)

// Enum value maps for MoneyType.
var (
	MoneyType_name = map[int32]string{
		0: "no_mtype",
		1: "money",
		2: "money_b",
		3: "money_order",
		4: "money_order_b",
		5: "money_cash",
		6: "money_cash_b",
		7: "gold_coin",
		8: "money_coupon",
		9: "max_mtype",
	}
	MoneyType_value = map[string]int32{
		"no_mtype":      0,
		"money":         1,
		"money_b":       2,
		"money_order":   3,
		"money_order_b": 4,
		"money_cash":    5,
		"money_cash_b":  6,
		"gold_coin":     7,
		"money_coupon":  8,
		"max_mtype":     9,
	}
)

func (x MoneyType) Enum() *MoneyType {
	p := new(MoneyType)
	*p = x
	return p
}

func (x MoneyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoneyType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_consume_consume_money_message_proto_enumTypes[2].Descriptor()
}

func (MoneyType) Type() protoreflect.EnumType {
	return &file_rpc_consume_consume_money_message_proto_enumTypes[2]
}

func (x MoneyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoneyType.Descriptor instead.
func (MoneyType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{2}
}

type CommoditySend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid int32 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"` //物品id（必填）
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"` //发放数量（必填）
}

func (x *CommoditySend) Reset() {
	*x = CommoditySend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_consume_consume_money_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommoditySend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommoditySend) ProtoMessage() {}

func (x *CommoditySend) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_consume_consume_money_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommoditySend.ProtoReflect.Descriptor instead.
func (*CommoditySend) Descriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{0}
}

func (x *CommoditySend) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CommoditySend) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// 发物品时可以同时发钱，方便业务使用
type MoneySend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtype MoneyType `protobuf:"varint,1,opt,name=mtype,proto3,enum=rbp.rpc.consume.MoneyType" json:"mtype,omitempty"` //金额类型（必填）
	Money int32     `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`                                //金额数量（必填）
}

func (x *MoneySend) Reset() {
	*x = MoneySend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_consume_consume_money_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneySend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneySend) ProtoMessage() {}

func (x *MoneySend) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_consume_consume_money_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneySend.ProtoReflect.Descriptor instead.
func (*MoneySend) Descriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{1}
}

func (x *MoneySend) GetMtype() MoneyType {
	if x != nil {
		return x.Mtype
	}
	return MoneyType_no_mtype
}

func (x *MoneySend) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

type GetRequestIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRequestIdReq) Reset() {
	*x = GetRequestIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_consume_consume_money_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestIdReq) ProtoMessage() {}

func (x *GetRequestIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_consume_consume_money_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestIdReq.ProtoReflect.Descriptor instead.
func (*GetRequestIdReq) Descriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{2}
}

type GetRequestIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`     //false-处理失败，true-处理成功
	RequestId uint64 `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"` //请求id，全局唯一
}

func (x *GetRequestIdRes) Reset() {
	*x = GetRequestIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_consume_consume_money_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestIdRes) ProtoMessage() {}

func (x *GetRequestIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_consume_consume_money_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestIdRes.ProtoReflect.Descriptor instead.
func (*GetRequestIdRes) Descriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{3}
}

func (x *GetRequestIdRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetRequestIdRes) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type CommoditySendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   uint64           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                        //请求id，全局唯一（必填）
	Type        ConsumeType      `protobuf:"varint,2,opt,name=type,proto3,enum=rbp.rpc.consume.ConsumeType" json:"type,omitempty"` //场景类型（必填）
	Uid         uint32           `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`                                    //用户id（必填）
	Commodities []*CommoditySend `protobuf:"bytes,4,rep,name=commodities,proto3" json:"commodities,omitempty"`                     //发放的物品，最多100种（必填）
	Subject     string           `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`                             //发放说明
	Moneys      []*MoneySend     `protobuf:"bytes,6,rep,name=moneys,proto3" json:"moneys,omitempty"`                               //发钱
	Rid         uint32           `protobuf:"varint,7,opt,name=rid,proto3" json:"rid,omitempty"`                                    //房间id
}

func (x *CommoditySendReq) Reset() {
	*x = CommoditySendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_consume_consume_money_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommoditySendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommoditySendReq) ProtoMessage() {}

func (x *CommoditySendReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_consume_consume_money_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommoditySendReq.ProtoReflect.Descriptor instead.
func (*CommoditySendReq) Descriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{4}
}

func (x *CommoditySendReq) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *CommoditySendReq) GetType() ConsumeType {
	if x != nil {
		return x.Type
	}
	return ConsumeType_no_ctype
}

func (x *CommoditySendReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CommoditySendReq) GetCommodities() []*CommoditySend {
	if x != nil {
		return x.Commodities
	}
	return nil
}

func (x *CommoditySendReq) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CommoditySendReq) GetMoneys() []*MoneySend {
	if x != nil {
		return x.Moneys
	}
	return nil
}

func (x *CommoditySendReq) GetRid() uint32 {
	if x != nil {
		return x.Rid
	}
	return 0
}

type CommoditySendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                          //false-处理失败，true-处理成功
	Code    ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=rbp.rpc.consume.ErrorCode" json:"code,omitempty"` //错误码
	Msg     string    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`                                   //错误信息
}

func (x *CommoditySendRes) Reset() {
	*x = CommoditySendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_consume_consume_money_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommoditySendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommoditySendRes) ProtoMessage() {}

func (x *CommoditySendRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_consume_consume_money_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommoditySendRes.ProtoReflect.Descriptor instead.
func (*CommoditySendRes) Descriptor() ([]byte, []int) {
	return file_rpc_consume_consume_money_message_proto_rawDescGZIP(), []int{5}
}

func (x *CommoditySendRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommoditySendRes) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ok
}

func (x *CommoditySendRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_rpc_consume_consume_money_message_proto protoreflect.FileDescriptor

var file_rpc_consume_consume_money_message_proto_rawDesc = []byte{
	0x0a, 0x27, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x72, 0x62, 0x70, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0x53, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x62,
	0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0x89, 0x03, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x6f, 0x6b, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x09, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x12, 0x12, 0x0b,
	0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x14,
	0x12, 0x15, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x6f, 0x64, 0x6f, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x17, 0x2a, 0xb2, 0x08, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x74,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x69, 0x76, 0x65, 0x10, 0x0a,
	0x12, 0x09, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x73, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x10,
	0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x10, 0x13, 0x12, 0x11, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x10, 0x14,
	0x12, 0x13, 0x0a, 0x0f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x61, 0x6c, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x10, 0x19,
	0x12, 0x12, 0x0a, 0x0e, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x6f, 0x6f, 0x64, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x1d, 0x12, 0x08, 0x0a, 0x04,
	0x63, 0x61, 0x73, 0x68, 0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x10, 0x20, 0x12, 0x14, 0x0a,
	0x10, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x24, 0x12, 0x0b, 0x0a,
	0x07, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x25, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x26, 0x12, 0x0e,
	0x0a, 0x0a, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x10, 0x27, 0x12, 0x14,
	0x0a, 0x10, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x10, 0x29, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x62, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x75, 0x63, 0x6b,
	0x79, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x62, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e,
	0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x2d,
	0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x2e,
	0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x2f, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x62,
	0x6f, 0x78, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x10, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x10, 0x33, 0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x10, 0x34, 0x12, 0x0e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x10, 0x35, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x10, 0x36, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x6f, 0x78,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x10, 0x38, 0x12, 0x0c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x62, 0x6f, 0x78, 0x10, 0x39, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x10, 0x3a, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x10, 0x3b, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x62,
	0x10, 0x3c, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x3d, 0x12,
	0x12, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x10, 0x3e, 0x12, 0x12, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x67, 0x72, 0x61, 0x62, 0x10, 0x3f, 0x12, 0x12, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0e, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x41, 0x12,
	0x12, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x10, 0x43, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x10, 0x44, 0x2a, 0xa7, 0x01, 0x0a,
	0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f,
	0x5f, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x5f, 0x62, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x74, 0x79, 0x70, 0x65, 0x10, 0x09, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x61, 0x6f, 0x6c, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x72, 0x62, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x5f, 0x70,
	0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_consume_consume_money_message_proto_rawDescOnce sync.Once
	file_rpc_consume_consume_money_message_proto_rawDescData = file_rpc_consume_consume_money_message_proto_rawDesc
)

func file_rpc_consume_consume_money_message_proto_rawDescGZIP() []byte {
	file_rpc_consume_consume_money_message_proto_rawDescOnce.Do(func() {
		file_rpc_consume_consume_money_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_consume_consume_money_message_proto_rawDescData)
	})
	return file_rpc_consume_consume_money_message_proto_rawDescData
}

var file_rpc_consume_consume_money_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rpc_consume_consume_money_message_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_rpc_consume_consume_money_message_proto_goTypes = []interface{}{
	(ErrorCode)(0),           // 0: rbp.rpc.consume.ErrorCode
	(ConsumeType)(0),         // 1: rbp.rpc.consume.ConsumeType
	(MoneyType)(0),           // 2: rbp.rpc.consume.MoneyType
	(*CommoditySend)(nil),    // 3: rbp.rpc.consume.CommoditySend
	(*MoneySend)(nil),        // 4: rbp.rpc.consume.MoneySend
	(*GetRequestIdReq)(nil),  // 5: rbp.rpc.consume.GetRequestIdReq
	(*GetRequestIdRes)(nil),  // 6: rbp.rpc.consume.GetRequestIdRes
	(*CommoditySendReq)(nil), // 7: rbp.rpc.consume.CommoditySendReq
	(*CommoditySendRes)(nil), // 8: rbp.rpc.consume.CommoditySendRes
}
var file_rpc_consume_consume_money_message_proto_depIdxs = []int32{
	2, // 0: rbp.rpc.consume.MoneySend.mtype:type_name -> rbp.rpc.consume.MoneyType
	1, // 1: rbp.rpc.consume.CommoditySendReq.type:type_name -> rbp.rpc.consume.ConsumeType
	3, // 2: rbp.rpc.consume.CommoditySendReq.commodities:type_name -> rbp.rpc.consume.CommoditySend
	4, // 3: rbp.rpc.consume.CommoditySendReq.moneys:type_name -> rbp.rpc.consume.MoneySend
	0, // 4: rbp.rpc.consume.CommoditySendRes.code:type_name -> rbp.rpc.consume.ErrorCode
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_rpc_consume_consume_money_message_proto_init() }
func file_rpc_consume_consume_money_message_proto_init() {
	if File_rpc_consume_consume_money_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_consume_consume_money_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommoditySend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_consume_consume_money_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneySend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_consume_consume_money_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_consume_consume_money_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_consume_consume_money_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommoditySendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_consume_consume_money_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommoditySendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_consume_consume_money_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpc_consume_consume_money_message_proto_goTypes,
		DependencyIndexes: file_rpc_consume_consume_money_message_proto_depIdxs,
		EnumInfos:         file_rpc_consume_consume_money_message_proto_enumTypes,
		MessageInfos:      file_rpc_consume_consume_money_message_proto_msgTypes,
	}.Build()
	File_rpc_consume_consume_money_message_proto = out.File
	file_rpc_consume_consume_money_message_proto_rawDesc = nil
	file_rpc_consume_consume_money_message_proto_goTypes = nil
	file_rpc_consume_consume_money_message_proto_depIdxs = nil
}
