// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: rpc/voice_lover/voice_lover_common.proto

package voice_lover

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlbumData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             // 专辑id
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                          // 专辑名称
	Intro         string `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro,omitempty"`                                        // 专辑介绍
	Cover         string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`                                        // 专辑封面
	CreateTime    uint64 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`           // 创建时间
	AudioCount    uint32 `protobuf:"varint,6,opt,name=audio_count,json=audioCount,proto3" json:"audio_count,omitempty"`           // 音频数量
	PlayCount     uint64 `protobuf:"varint,7,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`              // 播放数量
	PlayCountDesc string `protobuf:"bytes,8,opt,name=play_count_desc,json=playCountDesc,proto3" json:"play_count_desc,omitempty"` // 播放数量默认显示字符串
	OpUid         uint64 `protobuf:"varint,9,opt,name=op_uid,json=opUid,proto3" json:"op_uid,omitempty"`
}

func (x *AlbumData) Reset() {
	*x = AlbumData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumData) ProtoMessage() {}

func (x *AlbumData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumData.ProtoReflect.Descriptor instead.
func (*AlbumData) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{0}
}

func (x *AlbumData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlbumData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlbumData) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *AlbumData) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *AlbumData) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AlbumData) GetAudioCount() uint32 {
	if x != nil {
		return x.AudioCount
	}
	return 0
}

func (x *AlbumData) GetPlayCount() uint64 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *AlbumData) GetPlayCountDesc() string {
	if x != nil {
		return x.PlayCountDesc
	}
	return ""
}

func (x *AlbumData) GetOpUid() uint64 {
	if x != nil {
		return x.OpUid
	}
	return 0
}

type SubjectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 专题id
	Name       string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                // 专题名称
	CreateTime uint64       `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	Albums     []*AlbumData `protobuf:"bytes,4,rep,name=albums,proto3" json:"albums,omitempty"`                            // 专题下专辑数据
	AlbumCount uint64       `protobuf:"varint,5,opt,name=album_count,json=albumCount,proto3" json:"album_count,omitempty"` //专题下专辑数量
}

func (x *SubjectData) Reset() {
	*x = SubjectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectData) ProtoMessage() {}

func (x *SubjectData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectData.ProtoReflect.Descriptor instead.
func (*SubjectData) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{1}
}

func (x *SubjectData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectData) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SubjectData) GetAlbums() []*AlbumData {
	if x != nil {
		return x.Albums
	}
	return nil
}

func (x *SubjectData) GetAlbumCount() uint64 {
	if x != nil {
		return x.AlbumCount
	}
	return 0
}

type AudioSimpleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Resource  string   `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Covers    []string `protobuf:"bytes,4,rep,name=covers,proto3" json:"covers,omitempty"`
	Seconds   uint32   `protobuf:"varint,5,opt,name=seconds,proto3" json:"seconds,omitempty"`
	PlayCount uint64   `protobuf:"varint,6,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`
}

func (x *AudioSimpleData) Reset() {
	*x = AudioSimpleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSimpleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSimpleData) ProtoMessage() {}

func (x *AudioSimpleData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSimpleData.ProtoReflect.Descriptor instead.
func (*AudioSimpleData) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{2}
}

func (x *AudioSimpleData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AudioSimpleData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AudioSimpleData) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *AudioSimpleData) GetCovers() []string {
	if x != nil {
		return x.Covers
	}
	return nil
}

func (x *AudioSimpleData) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *AudioSimpleData) GetPlayCount() uint64 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

type AudioData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid          uint32           `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Resource     string           `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Covers       []string         `protobuf:"bytes,4,rep,name=covers,proto3" json:"covers,omitempty"`
	Title        string           `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Desc         string           `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Source       int32            `protobuf:"varint,7,opt,name=source,proto3" json:"source,omitempty"`
	Labels       []string         `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
	AuditStatus  int32            `protobuf:"varint,9,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	CreateTime   uint64           `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	OpUid        uint64           `protobuf:"varint,11,opt,name=op_uid,json=opUid,proto3" json:"op_uid,omitempty"`
	EditDubs     []*AudioEditData `protobuf:"bytes,12,rep,name=edit_dubs,json=editDubs,proto3" json:"edit_dubs,omitempty"`
	EditContents []*AudioEditData `protobuf:"bytes,13,rep,name=edit_contents,json=editContents,proto3" json:"edit_contents,omitempty"`
	EditPosts    []*AudioEditData `protobuf:"bytes,14,rep,name=edit_posts,json=editPosts,proto3" json:"edit_posts,omitempty"`
	EditCovers   []*AudioEditData `protobuf:"bytes,15,rep,name=edit_covers,json=editCovers,proto3" json:"edit_covers,omitempty"`
	Seconds      uint32           `protobuf:"varint,16,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *AudioData) Reset() {
	*x = AudioData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioData) ProtoMessage() {}

func (x *AudioData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioData.ProtoReflect.Descriptor instead.
func (*AudioData) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{3}
}

func (x *AudioData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AudioData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AudioData) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *AudioData) GetCovers() []string {
	if x != nil {
		return x.Covers
	}
	return nil
}

func (x *AudioData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AudioData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AudioData) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *AudioData) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AudioData) GetAuditStatus() int32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *AudioData) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AudioData) GetOpUid() uint64 {
	if x != nil {
		return x.OpUid
	}
	return 0
}

func (x *AudioData) GetEditDubs() []*AudioEditData {
	if x != nil {
		return x.EditDubs
	}
	return nil
}

func (x *AudioData) GetEditContents() []*AudioEditData {
	if x != nil {
		return x.EditContents
	}
	return nil
}

func (x *AudioData) GetEditPosts() []*AudioEditData {
	if x != nil {
		return x.EditPosts
	}
	return nil
}

func (x *AudioData) GetEditCovers() []*AudioEditData {
	if x != nil {
		return x.EditCovers
	}
	return nil
}

func (x *AudioData) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type AudioEditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AudioEditData) Reset() {
	*x = AudioEditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioEditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioEditData) ProtoMessage() {}

func (x *AudioEditData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioEditData.ProtoReflect.Descriptor instead.
func (*AudioEditData) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{4}
}

func (x *AudioEditData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AudioEditData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AudioAuditReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AudioAuditReason) Reset() {
	*x = AudioAuditReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioAuditReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioAuditReason) ProtoMessage() {}

func (x *AudioAuditReason) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioAuditReason.ProtoReflect.Descriptor instead.
func (*AudioAuditReason) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{5}
}

func (x *AudioAuditReason) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AudioAuditReason) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content    string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime uint64       `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	IpAddress  string       `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	UserInfo   *CommentUser `protobuf:"bytes,5,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{6}
}

func (x *Comment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Comment) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Comment) GetUserInfo() *CommentUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type CommentUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Avtar string `protobuf:"bytes,2,opt,name=avtar,proto3" json:"avtar,omitempty"`
}

func (x *CommentUser) Reset() {
	*x = CommentUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentUser) ProtoMessage() {}

func (x *CommentUser) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_voice_lover_voice_lover_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentUser.ProtoReflect.Descriptor instead.
func (*CommentUser) Descriptor() ([]byte, []int) {
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP(), []int{7}
}

func (x *CommentUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommentUser) GetAvtar() string {
	if x != nil {
		return x.Avtar
	}
	return ""
}

var File_rpc_voice_lover_voice_lover_common_proto protoreflect.FileDescriptor

var file_rpc_voice_lover_voice_lover_common_proto_rawDesc = []byte{
	0x0a, 0x28, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x72, 0x62, 0x70, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0xfb, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x70, 0x55, 0x69, 0x64, 0x22, 0xab, 0x01,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x0f,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xc2, 0x04, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x70, 0x55, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x62, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x44, 0x75, 0x62, 0x73, 0x12, 0x47, 0x0a, 0x0d,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45,
	0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x62, 0x70, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65,
	0x64, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a,
	0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x62, 0x70, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x37, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x76, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x76, 0x74, 0x61, 0x72, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x61, 0x6f, 0x6c, 0x61, 0x2d, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x72, 0x62, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x5f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_voice_lover_voice_lover_common_proto_rawDescOnce sync.Once
	file_rpc_voice_lover_voice_lover_common_proto_rawDescData = file_rpc_voice_lover_voice_lover_common_proto_rawDesc
)

func file_rpc_voice_lover_voice_lover_common_proto_rawDescGZIP() []byte {
	file_rpc_voice_lover_voice_lover_common_proto_rawDescOnce.Do(func() {
		file_rpc_voice_lover_voice_lover_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_voice_lover_voice_lover_common_proto_rawDescData)
	})
	return file_rpc_voice_lover_voice_lover_common_proto_rawDescData
}

var file_rpc_voice_lover_voice_lover_common_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_rpc_voice_lover_voice_lover_common_proto_goTypes = []interface{}{
	(*AlbumData)(nil),        // 0: rbp.rpc.voice_lover.AlbumData
	(*SubjectData)(nil),      // 1: rbp.rpc.voice_lover.SubjectData
	(*AudioSimpleData)(nil),  // 2: rbp.rpc.voice_lover.AudioSimpleData
	(*AudioData)(nil),        // 3: rbp.rpc.voice_lover.AudioData
	(*AudioEditData)(nil),    // 4: rbp.rpc.voice_lover.AudioEditData
	(*AudioAuditReason)(nil), // 5: rbp.rpc.voice_lover.AudioAuditReason
	(*Comment)(nil),          // 6: rbp.rpc.voice_lover.Comment
	(*CommentUser)(nil),      // 7: rbp.rpc.voice_lover.CommentUser
}
var file_rpc_voice_lover_voice_lover_common_proto_depIdxs = []int32{
	0, // 0: rbp.rpc.voice_lover.SubjectData.albums:type_name -> rbp.rpc.voice_lover.AlbumData
	4, // 1: rbp.rpc.voice_lover.AudioData.edit_dubs:type_name -> rbp.rpc.voice_lover.AudioEditData
	4, // 2: rbp.rpc.voice_lover.AudioData.edit_contents:type_name -> rbp.rpc.voice_lover.AudioEditData
	4, // 3: rbp.rpc.voice_lover.AudioData.edit_posts:type_name -> rbp.rpc.voice_lover.AudioEditData
	4, // 4: rbp.rpc.voice_lover.AudioData.edit_covers:type_name -> rbp.rpc.voice_lover.AudioEditData
	7, // 5: rbp.rpc.voice_lover.Comment.user_info:type_name -> rbp.rpc.voice_lover.CommentUser
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_rpc_voice_lover_voice_lover_common_proto_init() }
func file_rpc_voice_lover_voice_lover_common_proto_init() {
	if File_rpc_voice_lover_voice_lover_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSimpleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioEditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioAuditReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_voice_lover_voice_lover_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_voice_lover_voice_lover_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpc_voice_lover_voice_lover_common_proto_goTypes,
		DependencyIndexes: file_rpc_voice_lover_voice_lover_common_proto_depIdxs,
		MessageInfos:      file_rpc_voice_lover_voice_lover_common_proto_msgTypes,
	}.Build()
	File_rpc_voice_lover_voice_lover_common_proto = out.File
	file_rpc_voice_lover_voice_lover_common_proto_rawDesc = nil
	file_rpc_voice_lover_voice_lover_common_proto_goTypes = nil
	file_rpc_voice_lover_voice_lover_common_proto_depIdxs = nil
}
