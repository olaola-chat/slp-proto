// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"context"
	"fmt"

	"banban/app/dao/internal"
	"banban/app/pb"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// xsGroupTourDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsGroupTourDao struct {
	internal.XsGroupTourDao
}

var (
	// XsGroupTour is globally public accessible object for table xs_group_tour operations.
	XsGroupTour = xsGroupTourDao{
		internal.XsGroupTour,
	}
)

// Fill with you ideas below.

func GetGroupToursByCaptains(ctx context.Context, uids []uint32) ([]*pb.EntityXsGroupTour, error) {
	if len(uids) < 1 {
		return nil, nil
	}
	tours, err := XsGroupTour.Ctx(ctx).All("captain in (?)", uint32ToStringSlice(uids))
	if err != nil {
		if err == gdb.ErrNoRows {
			err = nil
		} else {
			g.Log().Errorf("get XsGroupTours failed:%v", err)
		}
	}
	return tours, err
}

func GetGroupToursByCaptain(ctx context.Context, uid uint32) (*pb.EntityXsGroupTour, error) {
	tour, err := XsGroupTour.Ctx(ctx).One("captain=?", uid)
	if err != nil {
		if err == gdb.ErrNoRows {
			err = nil
		} else {
			g.Log().Errorf("get XsGroupTour failed:%v", err)
		}
	}
	return tour, err
}

func uint32ToStringSlice(uids []uint32) (res []string) {
	if len(uids) < 1 {
		return res
	}
	for _, i := range uids {
		res = append(res, fmt.Sprintf("%v", i))
	}
	return res
}
