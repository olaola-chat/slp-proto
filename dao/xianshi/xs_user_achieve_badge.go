// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"banban/library"
	"context"
	"encoding/json"
	"fmt"
	"github.com/gogf/gf/os/gcache"
	"time"
)

// xsUserAchieveBadgeDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsUserAchieveBadgeDao struct {
	internal.XsUserAchieveBadgeDao
}

var (
	// XsUserAchieveBadge is globally public accessible object for table xs_user_achieve_badge operations.
	XsUserAchieveBadge = xsUserAchieveBadgeDao{
		internal.XsUserAchieveBadge,
	}
)

// Fill with you ideas below.
// 获取指定条数的已解锁成就勋章
func (d *xsUserAchieveBadgeDao) GetUnlockBadgeListLimit(ctx context.Context, uid uint32, limit int) []*pb.EntityXsUserAchieveBadge {
	key := fmt.Sprintf("Achieve.Badge.List.%d.%d", uid, limit)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		query := d.Ctx(ctx).Order("weight desc, update_time desc")
		if limit > 0 {
			query = query.Limit(limit)
		}
		return query.All("uid = ? and level > 0", uid)
	}, time.Second*60)
	if err != nil {
		return nil
	}
	data, ok := v.([]*pb.EntityXsUserAchieveBadge)
	if !ok {
		return nil
	}
	return data
}

// 获取用户全部已解锁的成就勋章
func (d *xsUserAchieveBadgeDao) GetUnlockBadgeListAll(ctx context.Context, uid uint32) []*pb.EntityXsUserAchieveBadge {
	var data []*pb.EntityXsUserAchieveBadge
	redis := library.RedisClient(library.RedisCache)
	key := d.GetBadgeListCacheKey(uid)
	res, _ := redis.Get(ctx, key).Result()
	if len(res) == 0 {
		data, err := d.Ctx(ctx).Fields("id, uid, badge_id, score, level, unlock_time").
			Order("weight desc").All("uid = ? AND level > 0", uid)
		if err != nil || data == nil {
			return nil
		}
		dataJson, _ := json.Marshal(data)
		redis.Set(ctx, key, dataJson, time.Second*120)
		return data
	}
	err := json.Unmarshal([]byte(res), &data)
	if err != nil {
		return nil
	}
	return data
}

func (d *xsUserAchieveBadgeDao) GetBadgeListCacheKey(uid uint32) string {
	return fmt.Sprintf("Xs.Achieve.Badge.List.%d", uid)
}

func (d *xsUserAchieveBadgeDao) RefreshBadgeList(ctx context.Context, uid uint32) error {
	redis := library.RedisClient(library.RedisCache)
	key := d.GetBadgeListCacheKey(uid)
	redis.Del(ctx, key)
	return nil
}

// 获取用户的某个成就勋章
func (d *xsUserAchieveBadgeDao) GetUserBadgeOne(ctx context.Context, uid, badgeId uint32) *pb.EntityXsUserAchieveBadge {
	key := fmt.Sprintf("Achieve.Badge.Info.%d.%d", uid, badgeId)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		res, err := d.Ctx(ctx).One("uid = ? and badge_id = ?", uid, badgeId)
		if err != nil {
			return nil, err
		}
		return res, nil
	}, time.Second*60)
	if err != nil {
		return nil
	}
	data, ok := v.(*pb.EntityXsUserAchieveBadge)
	if !ok {
		return nil
	}
	return data
}
