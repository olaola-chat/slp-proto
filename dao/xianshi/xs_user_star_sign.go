// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"
	"fmt"
	"github.com/gogf/gf/os/gcache"
	"time"
)

// xsUserStarSignDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsUserStarSignDao struct {
	internal.XsUserStarSignDao
}

var (
	// XsUserStarSign is globally public accessible object for table xs_user_star_sign operations.
	XsUserStarSign = xsUserStarSignDao{
		internal.XsUserStarSign,
	}
)

// Fill with you ideas below.
// 获取用户星座信息
func (d *xsUserStarSignDao) GetUserStarSignCache(ctx context.Context, uid uint32) *pb.EntityXsUserStarSign {
	key := fmt.Sprintf("User.Star.Sign.%d", uid)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).One("uid = ?", uid)
	}, time.Second*10)
	if err != nil {
		return nil
	}
	data, ok := v.(*pb.EntityXsUserStarSign)
	if !ok {
		return nil
	}
	return data
}

// 获取用户星座信息
func (d *xsUserStarSignDao) GetUserStarSignFromDb(ctx context.Context, uid uint32) *pb.EntityXsUserStarSign {
	data, err := d.Ctx(ctx).One("uid = ?", uid)
	if err != nil {
		return nil
	}
	return data
}

// 获取参与点亮星座的总人数
func (d *xsUserStarSignDao) GetStarSignUserCount(ctx context.Context) uint32 {
	key := "Star.Sign.User.Count"
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).Count()
	}, time.Second*60)
	if err != nil {
		return 0
	}
	count, ok := v.(int)
	if !ok {
		return 0
	}
	return uint32(count)
}

// 获取点亮星座的TOP用户，按点亮的数量排序
func (d *xsUserStarSignDao) GetLightenNumTopUsers(ctx context.Context, top int) []uint32 {
	key := fmt.Sprintf("Star.Lighten.Num.Top.%d", top)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		res, err := d.Ctx(ctx).Fields("uid").Order("lighten_num desc").Limit(top).All()
		if err != nil {
			return nil, err
		}
		var uids []uint32
		for _, val := range res {
			uids = append(uids, val.Uid)
		}
		return uids, nil
	}, time.Second*60)
	if err != nil {
		return nil
	}
	data, ok := v.([]uint32)
	if !ok {
		return nil
	}
	return data
}
