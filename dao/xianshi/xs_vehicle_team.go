// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"
	"database/sql"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// xsVehicleTeamDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsVehicleTeamDao struct {
	internal.XsVehicleTeamDao
}

var (
	// XsVehicleTeam is globally public accessible object for table xs_vehicle_team operations.
	XsVehicleTeam = xsVehicleTeamDao{
		internal.XsVehicleTeam,
	}
)

// Fill with you ideas below.

func (d *xsVehicleTeamDao) GetByUid(
	ctx context.Context, uid uint32) (*pb.EntityXsVehicleTeam, error) {

	return d.getOne(ctx, nil, "", "", "uid=?", uid)
}

func (d *xsVehicleTeamDao) getOne(
	ctx context.Context, tx *gdb.TX, fields, order string, where ...interface{},
) (*pb.EntityXsVehicleTeam, error) {

	m := XsVehicleTeam.Ctx(ctx)
	if tx != nil {
		m = m.TX(tx)
	}
	if fields != "" {
		m = m.Fields(fields)
	}
	if order != "" {
		m = m.Order(order)
	}

	val, err := m.One(where...)

	if err != nil && err != sql.ErrNoRows {
		g.Log().Printf("XsVehicleTeam.One failed, order:%s, where:%v, err:%v", order, where, err)
		return nil, err
	}

	if err == sql.ErrNoRows {
		return nil, nil
	}

	return val, nil
}
