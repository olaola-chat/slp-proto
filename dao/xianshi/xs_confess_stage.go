// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"context"
	"database/sql"
	"github.com/gogf/gf/frame/g"
	"time"
)

// xsConfessStageDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsConfessStageDao struct {
	internal.XsConfessStageDao
}

var (
	// XsConfessStage is globally public accessible object for table xs_confess_stage operations.
	XsConfessStage = xsConfessStageDao{
		internal.XsConfessStage,
	}
)

// Fill with you ideas below.
func (d *xsConfessStageDao) GetStage(ctx context.Context, uid, toUid uint32) (int, bool) {
	res, err := d.Ctx(ctx).Master().Where("uid = ? AND to_uid = ?", uid, toUid).One()
	if err != nil {
		return 0, false
	}
	if res == nil {
		return 0, false
	}
	return int(res.Stage), res.Sent == 1
}

func (d *xsConfessStageDao) InsertOrUpdateStage(ctx context.Context, uid, toUid uint32, stage, sent int) bool {
	if uid < 1 || toUid < 1 {
		return false
	}
	rec, err := d.Master().Where("uid = ? and to_uid = ?", uid, toUid).One()
	if err != nil && err != sql.ErrNoRows {
		return false
	}
	now := time.Now().Unix()
	if rec == nil {
		res, err := d.Ctx(ctx).Data(g.Map{"uid": uid, "to_uid": toUid, "stage": stage, "sent": sent, "create_time": now}).Insert()
		if err != nil {
			return false
		}
		affectedRows, _ := res.RowsAffected()
		if affectedRows == 0 {
			return false
		}
	} else {
		if stage < int(rec.Stage) {
			return false
		} else if stage == int(rec.Stage) && sent <= int(rec.Sent) {
			return false
		}
		data := g.Map{"stage": stage, "sent": sent, "update_time": now}
		if _, err = d.Master().Ctx(ctx).Data(data).Where("uid = ? AND to_uid = ?", uid, toUid).Update(); err != nil {
			return false
		}
	}
	return true
}
