// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"context"

	"banban/app/dao/internal"
	"banban/app/pb"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// xsGroupDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsGroupDao struct {
	internal.XsGroupDao
}

var (
	// XsGroup is globally public accessible object for table xs_group operations.
	XsGroup = xsGroupDao{
		internal.XsGroup,
	}
)

// Fill with you ideas below.

func GetGroupByGroupId(ctx context.Context, groupId uint32) (*pb.EntityXsGroup, error) {
	if groupId < 1 {
		return nil, nil
	}
	group, err := XsGroup.Ctx(ctx).One("group_id=? and deleted = 0 and allow_search = 1", groupId)
	if err != nil {
		if err == gdb.ErrNoRows {
			err = nil
		} else {
			g.Log().Errorf("get XsGroup failed:%v", err)
		}
	}
	return group, err
}

func GetGroupsByGroupIds(ctx context.Context, groupIds []uint32) ([]*pb.EntityXsGroup, error) {
	if len(groupIds) < 1 {
		return nil, nil
	}
	// 原文没有添加 and deleted = 0 and allow_search = 1
	groups, err := XsGroup.Ctx(ctx).All("group_id in (?) and deleted=0", uint32ToStringSlice(groupIds))
	if err != nil {
		if err == gdb.ErrNoRows {
			err = nil
		} else {
			g.Log().Errorf("get XsGroups failed:%v", err)
		}
	}
	return groups, err
}

// GetRecord 查询指定群组ID的数据
func (serv *xsGroupDao) GetRecord(ctx context.Context, id uint32) *pb.EntityXsGroup {
	if id > 0 {
		records := serv.GetRecords(ctx, []uint32{id})
		if len(records) > 0 {
			if record, exist := records[id]; exist {
				return record
			}
		}
	}

	return nil
}

// GetRecords 批量查询指定群组ID的数据
func (serv *xsGroupDao) GetRecords(ctx context.Context, ids []uint32) map[uint32]*pb.EntityXsGroup {
	ret := make(map[uint32]*pb.EntityXsGroup)

	if len(ids) > 0 {
		records, err := XsGroup.Ctx(ctx).FindAll("group_id IN (?) AND deleted = 0", ids)
		if err == nil && len(records) > 0 {
			for _, item := range records {
				ret[item.GroupId] = item
			}
		}
	}

	return ret
}

// GetCreators 查询指定群组ID的创建者
func (serv *xsGroupDao) GetCreators(ctx context.Context, ids []uint32) map[uint32]interface{} {
	ret := make(map[uint32]interface{})

	if len(ids) > 0 {
		records := serv.GetRecords(ctx, ids)
		if len(records) > 0 {
			for _, item := range records {
				ret[item.Createor] = item.GroupId
			}
		}
	}

	return ret
}
