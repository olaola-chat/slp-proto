// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"banban/library"
	"banban/library/tool"
	"banban/rpc/client"
	"context"
	"fmt"
	"github.com/gogf/gf/util/gconv"
	"time"
)

// xsOnlineEarnArtistDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsOnlineEarnArtistDao struct {
	internal.XsOnlineEarnArtistDao
}

var (
	// XsOnlineEarnArtist is globally public accessible object for table xs_online_earn_artist operations.
	XsOnlineEarnArtist = xsOnlineEarnArtistDao{
		internal.XsOnlineEarnArtist,
	}
)

// Fill with you ideas below.

// 获取榜单数据, 星力榜、艺人榜、战力榜
func (d *xsOnlineEarnArtistDao) GetOnlineEarnRank(ctx context.Context, rankKey string, limit int64) []*pb.OnlineEarnRankUserData {
	redisClient := library.RedisClient(library.RedisCache)
	var start int64 = 0
	stop := start + limit - 1
	uidScores, err := redisClient.ZRevRangeWithScores(ctx, rankKey, start, stop).Result()
	if err != nil || len(uidScores) == 0 {
		return nil
	}
	var uids []uint32
	for _, val := range uidScores {
		uid := gconv.Uint32(val.Member)
		uids = append(uids, uid)
	}
	var profileMap = make(map[uint32]*pb.EntityXsUserProfile)
	profiles, err := client.UserProfile.Mget(ctx, uids, []string{})
	if err == nil && len(profiles) > 0 {
		for _, user := range profiles {
			profileMap[user.Uid] = user
		}
	}
	var (
		artistPointMap = make(map[uint32]uint32)
		agentPointMap  = make(map[uint32]uint32)
	)
	artistList, err := XsOnlineEarnArtist.Ctx(ctx).Fields("uid, point").All("uid IN (?)", uids)
	if err == nil && len(artistList) > 0 {
		for _, val := range artistList {
			artistPointMap[val.Uid] = val.Point
		}
	}
	agentList, err := XsOnlineEarnAgent.Ctx(ctx).Fields("uid, point").All("uid IN (?)", uids)
	if err == nil && len(agentList) > 0 {
		for _, val := range agentList {
			agentPointMap[val.Uid] = val.Point
		}
	}
	var data []*pb.OnlineEarnRankUserData
	for k, val := range uidScores {
		var rankInfo = new(pb.OnlineEarnRankUserData)
		rankInfo.Rank = uint32(k) + 1
		rankInfo.Uid = gconv.Uint32(val.Member)
		if rankInfo.Uid < 100010050 {
			continue
		}
		if user, ok := profileMap[rankInfo.Uid]; ok {
			rankInfo.Name = user.Name
			rankInfo.Icon = user.Icon
		}
		if artistPoint, ok := artistPointMap[rankInfo.Uid]; ok {
			rankInfo.ArtistLevel = d.GetOnlineEarnLevel(artistPoint, 1)
		}
		if agentPoint, ok := agentPointMap[rankInfo.Uid]; ok {
			rankInfo.AgentLevel = d.GetOnlineEarnLevel(agentPoint, 2)
		}
		rankInfo.Score = gconv.Uint32(val.Score)
		data = append(data, rankInfo)
	}
	return data
}

// 获取我的排名
func (d *xsOnlineEarnArtistDao) GetMyOnlineEarnRank(ctx context.Context, rankKey string, profile *pb.EntityXsUserProfile) *pb.OnlineEarnRankUserData {
	redisClient := library.RedisClient(library.RedisCache)
	uidStr := gconv.String(profile.Uid)

	var (
		myRank  uint32
		myScore uint32
	)
	//判断用户是否在有序集合中
	if score, err := redisClient.ZScore(ctx, rankKey, uidStr).Result(); err == nil {
		myIdx := redisClient.ZRevRank(ctx, rankKey, uidStr).Val()
		myRank = uint32(myIdx) + 1
		myScore = uint32(score)
	}
	var (
		artistLevel uint32
		agentLevel  uint32
	)
	artistInfo, _ := XsOnlineEarnArtist.Ctx(ctx).Fields("uid, point").One("uid = ?", profile.Uid)
	agentInfo, _ := XsOnlineEarnAgent.Ctx(ctx).Fields("uid, point").One("uid = ?", profile.Uid)
	if artistInfo != nil {
		artistLevel = d.GetOnlineEarnLevel(artistInfo.Point, 1)
	}
	if agentInfo != nil {
		agentLevel = d.GetOnlineEarnLevel(agentInfo.Point, 2)
	}
	data := &pb.OnlineEarnRankUserData{
		Rank:        myRank,
		Uid:         profile.Uid,
		Name:        profile.Name,
		Icon:        profile.Icon,
		Score:       myScore,
		ArtistLevel: artistLevel,
		AgentLevel:  agentLevel,
	}
	return data
}

// 根据类型获取星力榜key
func (d *xsOnlineEarnArtistDao) GetStarRankKey(tab uint32, appId int32) string {
	var rankKey string
	if tab == 1 {
		today := time.Now().Format("20060102")
		rankKey = d.GetStarDailyRankKey(today, appId)
	} else {
		stime := tool.Date.GetWeekStartTime(0).Unix()
		rankKey = d.GetStarWeeklyRankKey(stime, appId)
	}
	return rankKey
}

// 根据类型获取艺人榜key
func (d *xsOnlineEarnArtistDao) GetArtistRankKey(tab uint32, appId int32) string {
	var rankKey string
	if tab == 1 {
		today := time.Now().Format("20060102")
		rankKey = d.GetArtistDailyRankKey(today, appId)
	} else if tab == 2 {
		stime := tool.Date.GetWeekStartTime(0).Unix()
		rankKey = d.GetArtistWeeklyRankKey(stime, appId)
	} else {
		rankKey = d.GetArtistTotalRankKey(appId)
	}
	fmt.Println(rankKey)
	return rankKey
}

// 根据类型获取战力榜key
func (d *xsOnlineEarnArtistDao) GetTeamRankKey(tab uint32, appId int32) string {
	var rankKey string
	if tab == 1 {
		today := time.Now().Format("20060102")
		rankKey = d.GetTeamDailyRankKey(today, appId)
	} else if tab == 2 {
		stime := tool.Date.GetWeekStartTime(0).Unix()
		rankKey = d.GetTeamWeeklyRankKey(stime, appId)
	} else {
		rankKey = d.GetTeamTotalRankKey(appId)
	}
	return rankKey
}

// 根据类型获取任务榜key
func (d *xsOnlineEarnArtistDao) GetMissionRankKey(tab uint32, appId int32) string {
	var rankKey string
	if tab == 1 {
		today := time.Now().Format("20060102")
		rankKey = d.GetMissionDailyRankKey(today, appId)
	} else {
		stime := tool.Date.GetWeekStartTime(0).Unix()
		rankKey = d.GetMissionWeeklyRankKey(stime, appId)
	}
	return rankKey
}

// 获取星力榜日榜key
func (d *xsOnlineEarnArtistDao) GetStarDailyRankKey(date string, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_star_daily.%s.%d", date, appId)
}

// 获取星力榜周榜key
func (d *xsOnlineEarnArtistDao) GetStarWeeklyRankKey(stime int64, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_star_weekly.%d.%d", stime, appId)
}

// 获取艺人榜日榜key
func (d *xsOnlineEarnArtistDao) GetArtistDailyRankKey(date string, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_artist_daily.%s.%d", date, appId)
}

// 获取艺人榜周榜key
func (d *xsOnlineEarnArtistDao) GetArtistWeeklyRankKey(stime int64, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_artist_weekly.%d.%d", stime, appId)
}

// 获取艺人榜总榜key
func (d *xsOnlineEarnArtistDao) GetArtistTotalRankKey(appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_artist_total.%d", appId)
}

// 获取战力榜日榜key
func (d *xsOnlineEarnArtistDao) GetTeamDailyRankKey(date string, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_team_daily.%s.%d", date, appId)
}

// 获取战力榜周榜key
func (d *xsOnlineEarnArtistDao) GetTeamWeeklyRankKey(stime int64, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_team_weekly.%d.%d", stime, appId)
}

// 获取战力榜总榜key
func (d *xsOnlineEarnArtistDao) GetTeamTotalRankKey(appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_team_total.%d", appId)
}

// 获取任务榜日榜key
func (d *xsOnlineEarnArtistDao) GetMissionDailyRankKey(date string, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_mission_daily.%s.%d", date, appId)
}

// 获取任务榜周榜key
func (d *xsOnlineEarnArtistDao) GetMissionWeeklyRankKey(stime int64, appId int32) string {
	return fmt.Sprintf("Xs_online_earn_rank_mission_weekly.%d.%d", stime, appId)
}

// 获取艺人、经纪人等级(cate 1:艺人,2:经纪人)
func (d *xsOnlineEarnArtistDao) GetOnlineEarnLevel(point uint32, cate uint32) uint32 {
	var levelConfig []uint32
	if cate == 1 {
		levelConfig = ArtistLevelConfig
	} else {
		levelConfig = AgentLevelConfig
	}

	length := len(levelConfig)
	for i := length - 1; i >= 0; i-- {
		if point >= levelConfig[i] {
			return uint32(i + 1)
		}
	}
	return 0
}

// 艺人等级
var ArtistLevelConfig = []uint32{
	1,
	1000,
	3000,
	6000,
	11000,
	18000,
	28000,
	48000,
	78000,
	128000,
	198000,
	298000,
	498000,
	798000,
	1298000,
	1998000,
	2998000,
	4998000,
	7998000,
	12998000,
}

// 经纪人等级
var AgentLevelConfig = []uint32{
	1,
	1000,
	4000,
	9000,
	16000,
	26000,
	56000,
	106000,
	176000,
	276000,
	576000,
	1076000,
	1776000,
	2776000,
	5776000,
	10776000,
	17776000,
	27776000,
	57776000,
	107776000,
}
