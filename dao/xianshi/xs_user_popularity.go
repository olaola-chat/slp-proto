// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"
)

// xsUserPopularityDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsUserPopularityDao struct {
	internal.XsUserPopularityDao
}

var (
	// XsUserPopularity is globally public accessible object for table xs_user_popularity operations.
	XsUserPopularity = xsUserPopularityDao{
		internal.XsUserPopularity,
	}
)

// Fill with you ideas below.

// 人气等级配置
var popularityLevels = []int64{
	100,
	1000,
	2000,
	4000,
	7000,
	12000,
	20000,
	30000,
	50000,
	100000,
	200000,
	300000,
	500000,
	700000,
	1000000,
	1500000,
	2000000,
	2700000,
	3500000,
	4500000,
	5500000,
	7000000,
	8500000,
	10500000,
	12500000,
	15000000,
	17500000,
	20000000,
	23000000,
	26000000,
	31000000,
	36000000,
	41000000,
	48000000,
	55000000,
	65000000,
	75000000,
	87000000,
	99000000,
	111000000,
	126000000,
	141000000,
	158000000,
	175000000,
	195000000,
	215000000,
	240000000,
	265000000,
	290000000,
	320000000,
	350000000,
	400000000,
	450000000,
	520000000,
	590000000,
	690000000,
	790000000,
	940000000,
	1090000000,
	1290000000,
}

func (d xsUserPopularityDao) GetMultiPopularity(ctx context.Context, uids []uint32) (map[uint32]*pb.EntityXsUserPopularity, error) {
	var listMap = make(map[uint32]*pb.EntityXsUserPopularity)
	populars, err := XsUserPopularity.Ctx(ctx).Where("uid IN(?)", uids).All()
	if err != nil {
		return listMap, err
	}

	if len(populars) == 0 {
		return listMap, err
	}

	for _, popularity := range populars {
		listMap[popularity.Uid] = popularity
	}

	return listMap, nil
}

// GetPopularityLevel 输入单位是人气值
func (d xsUserPopularityDao) GetPopularityLevel(popularity int32) int32 {
	if int64(popularity) < popularityLevels[0] {
		return 0
	}
	length := len(popularityLevels)
	for i := length - 1; i >= 0; i-- {
		if int64(popularity) >= popularityLevels[i] {
			return int32(i + 1)
		}
	}
	return 0
}
