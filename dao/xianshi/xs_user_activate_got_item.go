// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"context"
	"fmt"
	"github.com/gogf/gf/database/gdb"
	"strings"
	"time"

	"github.com/gogf/gf/errors/gerror"
)

// xsUserActivateGotItemDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsUserActivateGotItemDao struct {
	internal.XsUserActivateGotItemDao
}

var (
	// XsUserActivateGotItem is globally public accessible object for table xs_user_activate_got_item operations.
	XsUserActivateGotItem = xsUserActivateGotItemDao{
		internal.XsUserActivateGotItem,
	}
)

// Fill with you ideas below.

/*
*
INSERT INTO bb_room_data_sum_day (rid,day_idx,create_time,new_fans_num,total_room_package)
VALUES (1,2,1625716222,1,2)ON DUPLICATE KEY UPDATE new_fans_num=new_fans_num+1,total_room_package=total_room_package+2,update_time=1625716222;
*/
func (b *xsUserActivateGotItemDao) MultipleIncByFiled(ctx context.Context, fileMapList []map[string]int64) (int64, error) {
	var err error

	if len(fileMapList) <= 0 {
		return 0, gerror.New("参数错误")
	}

	createTime := time.Now().Unix()
	valueStr := ""

	for _, v := range fileMapList {
		if _, ok := v["uid"]; !ok {
			return 0, gerror.New("缺少uid")
		}

		if _, ok := v["ac_id"]; !ok {
			return 0, gerror.New("缺少ac_id")
		}

		if _, ok := v["ac_num"]; !ok {
			return 0, gerror.New("缺少ac_num")
		}
		valueStr += fmt.Sprintf("(%d,%d,%d,%d),", v["uid"], v["ac_id"], v["ac_num"], createTime)
	}

	valueStr = strings.Trim(valueStr, ",")

	text := `
	INSERT INTO xs_user_activate_got_item (uid,ac_id,ac_num,create_time) VALUES %s ON DUPLICATE KEY UPDATE ac_num=ac_num+values(ac_num),update_time=%d;
	`

	sql := fmt.Sprintf(text, valueStr, createTime)
	r, err := b.DB.Ctx(ctx).Exec(sql)
	if err != nil {
		return 0, nil
	}
	id, err := r.LastInsertId()
	return id, err
}

func (b *xsUserActivateGotItemDao) MultipleIncByFiledTx(ctx context.Context, tx *gdb.TX, fileMapList []map[string]int64) (int64, error) {
	var err error

	if len(fileMapList) <= 0 {
		return 0, gerror.New("参数错误")
	}

	createTime := time.Now().Unix()
	valueStr := ""

	for _, v := range fileMapList {
		if _, ok := v["uid"]; !ok {
			return 0, gerror.New("缺少uid")
		}

		if _, ok := v["ac_id"]; !ok {
			return 0, gerror.New("缺少ac_id")
		}

		if _, ok := v["ac_num"]; !ok {
			return 0, gerror.New("缺少ac_num")
		}

		if _, ok := v["pool_id"]; !ok {
			return 0, gerror.New("缺少奖池id")
		}
		valueStr += fmt.Sprintf("(%d,%d,%d,%d,%d),", v["uid"], v["pool_id"], v["ac_id"], v["ac_num"], createTime)
	}

	valueStr = strings.Trim(valueStr, ",")

	text := `
	INSERT INTO xs_user_activate_got_item (uid,pool_id,ac_id,ac_num,create_time) VALUES %s ON DUPLICATE KEY UPDATE ac_num=ac_num+values(ac_num),update_time=%d;
	`
	sql := fmt.Sprintf(text, valueStr, createTime)
	r, err := tx.Exec(sql)
	if err != nil {
		return 0, err
	}
	id, err := r.LastInsertId()
	return id, err
}
