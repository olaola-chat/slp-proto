// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"
	"fmt"
	"github.com/gogf/gf/os/gcache"
	"time"
)

// xsWeekStarRankDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsWeekStarRankDao struct {
	internal.XsWeekStarRankDao
}

var (
	// XsWeekStarRank is globally public accessible object for table xs_week_star_rank operations.
	XsWeekStarRank = xsWeekStarRankDao{
		internal.XsWeekStarRank,
	}
)

// Fill with you ideas below.
// 获取周星榜历史第一名
func (d *xsWeekStarRankDao) GetWeekStarTopHistory(ctx context.Context, appId uint32, page, limit int) []*pb.EntityXsWeekStarRank {
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * limit
	key := fmt.Sprintf("Week.Star.Fame.Hall.%d.%d", appId, offset)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).Order("week_start desc").Offset(offset).Limit(limit).All("app_id = ? AND rank = 1", appId)
	}, time.Second*300)
	if err != nil {
		return nil
	}
	data, ok := v.([]*pb.EntityXsWeekStarRank)
	if !ok {
		return nil
	}
	return data
}

// 获取周星榜第一名的总条数
func (d *xsWeekStarRankDao) GetWeekStarTopTotal(ctx context.Context, appId uint32) int {
	key := fmt.Sprintf("Week.Star.Cycle.Total.%d", appId)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).Fields("id").Count("app_id = ? AND rank = 1", appId)
	}, time.Second*300)
	if err != nil {
		return 0
	}
	data, ok := v.(int)
	if !ok {
		return 0
	}
	return data
}
