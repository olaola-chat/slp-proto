// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"banban/library"
	"context"
	"encoding/json"
	"fmt"
	"github.com/gogf/gf/os/gcache"
	"time"
)

// xsStarSignRecordDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsStarSignRecordDao struct {
	internal.XsStarSignRecordDao
}

var (
	// XsStarSignRecord is globally public accessible object for table xs_star_sign_record operations.
	XsStarSignRecord = xsStarSignRecordDao{
		internal.XsStarSignRecord,
	}
)

// Fill with you ideas below.
// 获取用户最新点亮的星座
func (d *xsStarSignRecordDao) GetLatestLightenStar(ctx context.Context, uid uint32) *pb.EntityXsStarSignRecord {
	key := fmt.Sprintf("Latest.Lighten.Star.%d", uid)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).Order("id desc").One("uid = ? and lighten_time > 0", uid)
	}, time.Second*5)
	if err != nil {
		return nil
	}
	data, ok := v.(*pb.EntityXsStarSignRecord)
	if !ok {
		return nil
	}
	return data
}

// 获取用户星座记录
func (d *xsStarSignRecordDao) GetStarSignRecord(ctx context.Context, uid, starId uint32) *pb.EntityXsStarSignRecord {
	var data *pb.EntityXsStarSignRecord
	redis := library.RedisClient(library.RedisCache)
	key := d.GetStarSignRecordCacheKey(uid, starId)
	res, _ := redis.Get(ctx, key).Result()
	if len(res) == 0 {
		record, err := d.Ctx(ctx).One("uid = ? and star_id = ?", uid, starId)
		if err != nil || record == nil {
			return nil
		}
		data := &pb.EntityXsStarSignRecord{GetAward: record.GetAward, LightenTime: record.LightenTime}
		dataJson, _ := json.Marshal(data)
		redis.Set(ctx, key, dataJson, time.Second*60)
		return data
	}
	err := json.Unmarshal([]byte(res), &data)
	if err != nil {
		return nil
	}
	return data
}

func (d *xsStarSignRecordDao) GetStarSignRecordCacheKey(uid, starId uint32) string {
	return fmt.Sprintf("Xs.Star.Sign.Record.%d.%d", uid, starId)
}

func (d *xsStarSignRecordDao) RefreshStarSignRecord(ctx context.Context, uid, starId uint32) error {
	redis := library.RedisClient(library.RedisCache)
	key := d.GetStarSignRecordCacheKey(uid, starId)
	redis.Del(ctx, key)
	return nil
}

// 获取用户星座点亮、领奖状态
func (d *xsStarSignRecordDao) GetStarSignStatus(ctx context.Context, uid, starId uint32) (lightenTime uint32, getAward uint32) {
	record := d.GetStarSignRecord(ctx, uid, starId)
	if record == nil {
		return 0, 0
	}
	lightenTime = record.LightenTime
	getAward = record.GetAward
	return
}

// 获取某星座已点亮的人数
func (d *xsStarSignRecordDao) GetStarLightenUserCount(ctx context.Context, starId uint32) uint32 {
	key := fmt.Sprintf("Star.Lighten.User.Count.%d", starId)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).Count("star_id = ? and lighten_time > 0", starId)
	}, time.Second*60)
	if err != nil {
		return 0
	}
	data, ok := v.(int)
	if !ok {
		return 0
	}
	return uint32(data)
}

// 获取点亮某个星座的TOP用户，按点亮的时间排序
func (d *xsStarSignRecordDao) GetLightenTimeTopUsers(ctx context.Context, starId uint32, top int) []uint32 {
	key := fmt.Sprintf("Star.Lighten.Time.Top.%d.%d", starId, top)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		res, err := d.Ctx(ctx).Fields("uid").Order("lighten_time asc").Limit(top).All("star_id = ?", starId)
		if err != nil {
			return nil, err
		}
		var uids []uint32
		for _, val := range res {
			uids = append(uids, val.Uid)
		}
		return uids, nil
	}, time.Second*60)
	if err != nil {
		return nil
	}
	data, ok := v.([]uint32)
	if !ok {
		return nil
	}
	return data
}

// 获取用户已点亮星座列表
func (d *xsStarSignRecordDao) GetUserLightenStarList(ctx context.Context, uid uint32) []*pb.EntityXsStarSignRecord {
	key := fmt.Sprintf("User.Lighten.Star.List.%d", uid)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).All("uid = ? and lighten_time > 0", uid)
	}, time.Second*60)
	if err != nil {
		return nil
	}
	data, ok := v.([]*pb.EntityXsStarSignRecord)
	if !ok {
		return data
	}
	return data
}
