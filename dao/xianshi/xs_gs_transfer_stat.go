// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"
	"fmt"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gcache"
	"time"
)

// xsGsTransferStatDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsGsTransferStatDao struct {
	internal.XsGsTransferStatDao
}

var (
	// XsGsTransferStat is globally public accessible object for table xs_gs_transfer_stat operations.
	XsGsTransferStat = xsGsTransferStatDao{
		internal.XsGsTransferStat,
	}
)

// Fill with you ideas below.
// 新增积分
func (d *xsGsTransferStatDao) AddPoints(ctx context.Context, guid, points uint32, transNew bool) error {
	stat, _ := d.Ctx(ctx).One("guid = ?", guid)
	now := time.Now().Unix()
	if stat == nil {
		insertData := g.Map{"guid": guid, "points": points, "sum_points": points, "sum_transfer": 1, "create_time": now}
		_, err := d.Ctx(ctx).Insert(insertData)
		if err != nil {
			return err
		}
	} else {
		if transNew {
			stat.SumTransfer++
		}
		updateData := g.Map{
			"points":       gdb.Raw(fmt.Sprintf("points+%d", points)),
			"sum_points":   gdb.Raw(fmt.Sprintf("sum_points+%d", points)),
			"sum_transfer": stat.SumTransfer,
			"update_time":  now,
		}
		_, err := d.Ctx(ctx).Where("guid = ?", guid).Update(updateData)
		if err != nil {
			return err
		}
	}
	return nil
}

// 获取GS转化数据
func (d *xsGsTransferStatDao) GetStat(ctx context.Context, guid uint32) *pb.EntityXsGsTransferStat {
	key := fmt.Sprintf("Gs.Transfer.Stat.%d", guid)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).One("guid = ?", guid)
	}, time.Second*30)
	if err != nil {
		return nil
	}
	data, ok := v.(*pb.EntityXsGsTransferStat)
	if !ok {
		return nil
	}
	return data
}
