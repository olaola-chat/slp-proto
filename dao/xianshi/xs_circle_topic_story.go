// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"
	"fmt"
	"github.com/gogf/gf/os/gcache"
	"github.com/gogf/gf/util/gconv"
	"time"
)

// xsCircleTopicStoryDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsCircleTopicStoryDao struct {
	internal.XsCircleTopicStoryDao
}

var (
	// XsCircleTopicStory is globally public accessible object for table xs_circle_topic_story operations.
	XsCircleTopicStory = xsCircleTopicStoryDao{
		internal.XsCircleTopicStory,
	}
)

// Fill with you ideas below.
// 查询用户发布的故事动态
func (d *xsCircleTopicStoryDao) GetTopicStoryList(ctx context.Context, uid uint32, offset, limit int) []*pb.EntityXsCircleTopicStory {
	key := fmt.Sprintf("Topic.Story.List.%d.%d", uid, offset)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).Order("id desc").Offset(offset).Limit(limit).All("uid = ? AND status = 'success'", uid)
	}, time.Second*60)
	if err != nil {
		return nil
	}
	data, ok := v.([]*pb.EntityXsCircleTopicStory)
	if !ok {
		return nil
	}
	return data
}

// 批量查询多个用户发布的故事动态
func (d *xsCircleTopicStoryDao) GetTopicStoryMulti(ctx context.Context, uids []uint32, limit int) map[int64][]int64 {
	limit *= len(uids)
	res, err := d.Ctx(ctx).Fields("id, uid").Order("id desc").Limit(limit).All("uid IN (?) AND status = 'success'", uids)
	if err != nil || res == nil {
		return nil
	}
	var data = make(map[int64][]int64, len(uids))
	for _, val := range res {
		uid := gconv.Int64(val.Uid)
		data[uid] = append(data[uid], gconv.Int64(val.Id))
	}
	return data
}
