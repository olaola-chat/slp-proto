// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"context"
	"time"

	"banban/app/dao/internal"
	"banban/app/model"
	"banban/app/pb"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// xsBannerDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsBannerDao struct {
	internal.XsBannerDao
}

var (
	// XsBanner is globally public accessible object for table xs_banner operations.
	XsBanner = xsBannerDao{
		internal.XsBanner,
	}
)

const (
	SubApp_HiSong = 1
)

// Fill with you ideas below.
func BannerGetValues(ctx context.Context, appId model.AppID, position, packageName string) ([]*pb.EntityXsBanner, error) {
	var subApp int32
	if position != "chatroom" {
		subApp = SubApp_HiSong
	}
	now := time.Now().Unix()
	banners, err := XsBanner.Ctx(ctx).
		Order("ordering desc,id desc").
		All("position = ? and deleted = 0 and app_id = ? and begin_time <= ?  and end_time > ?",
			position, appId, now, now)
		//All("position = ? and deleted = 0 and app_id = ? ",
		//	position, appId)
	if err != nil && err != gdb.ErrNoRows {
		g.Log().Errorf("BannerGetValues err %v", err)
		return nil, err
	}

	// 吃掉 ErrNoRows
	if len(banners) < 1 {
		return nil, nil
	}

	ret := make([]*pb.EntityXsBanner, 0)
	for _, v := range banners {
		if (subApp == 0 && v.SubApp == 0) || (subApp > 0 && subApp == v.SubApp) {
			ret = append(ret, v)
		}
	}

	return ret, nil
}

func GetSubAppId(packageName string) int32 {
	return SubApp_HiSong
}
