// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"
	"fmt"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gcache"
	"time"
)

// xsStarSignAssistDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsStarSignAssistDao struct {
	internal.XsStarSignAssistDao
}

var (
	// XsStarSignAssist is globally public accessible object for table xs_star_sign_assist operations.
	XsStarSignAssist = xsStarSignAssistDao{
		internal.XsStarSignAssist,
	}
)

// Fill with you ideas below.
// 获取用户星座助力信息
func (d *xsStarSignAssistDao) GetUserStarAssist(ctx context.Context, uid, assistUid, starId uint32) *pb.EntityXsStarSignAssist {
	key := fmt.Sprintf("User.Star.Assist.%d.%d.%d", uid, assistUid, starId)
	v, err := gcache.GetOrSetFunc(key, func() (interface{}, error) {
		return d.Ctx(ctx).One("uid = ? and assist_uid = ? and star_id = ?", uid, assistUid, starId)
	}, time.Second*5)
	if err != nil {
		return nil
	}
	data, ok := v.(*pb.EntityXsStarSignAssist)
	if !ok {
		return nil
	}
	return data
}

// 保存助力记录
func (d *xsStarSignAssistDao) SaveUserStarAssist(ctx context.Context, uid, assistUid, starId uint32) error {
	res, _ := d.Ctx(ctx).One("uid = ? and assist_uid = ? and star_id = ?", uid, assistUid, starId)
	if res != nil {
		return nil
	}
	data := g.Map{"uid": uid, "assist_uid": assistUid, "star_id": starId, "create_time": time.Now().Unix()}
	_, err := d.Ctx(ctx).Master().Insert(data)
	return err
}
