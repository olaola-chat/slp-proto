// ==========================================================================
// This is auto-generated by gf cli tool. DO NOT EDIT THIS FILE MANUALLY.
// ==========================================================================

package internal

import (
	"context"
	"database/sql"
	"errors"
	"reflect"
	"strings"
	"time"

	"github.com/gogf/gf/container/gvar"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"

	//	"banban/app/model"
	"banban/app/pb"
)

// XsGiftDao is the manager for logic model data accessing
// and custom defined data operations functions management.
type XsGiftDao struct {
	gmvc.M
	DB      gdb.DB
	Table   string
	Columns xsGiftColumns
}

// XsGiftColumns defines and stores column names for table xs_gift.
type xsGiftColumns struct {
	ID             string //
	Name           string // 礼物名称
	NameZhTw       string // 礼物名称台湾版
	NameEn         string // 礼物名称英文版
	Price          string // 单价，元
	Display        string // 礼物场景，房间，私聊，订单, 坐骑, 主页装扮
	SubDisplay     string // 礼物显示的细分场景：all-全部，wolf-仅狼人房展示，guess-仅画猜房展示，union-联盟房专属礼物，marry-婚礼房专属礼物，pub_drink-仅夜店房，special-专用，order-点单，game-游戏，vehicle-车队，music-点唱，radio-defend 电台，cp-woman 处CP女，cp-man 处CP男，joy-woman 情感女，joy-man 情感男，live-直播，expand-扩列，play-踢保，ifyouare-非诚勿扰，pia-PIA戏，black-self 开黑个人厅，black-pdy 开黑皮队友，talk-box 语音聊，pub-电音派对，lucky_gift 幸运礼物，cplink-连连看, king王者, ktv-KTV
	Type           string // 礼物显示方式，静态的，普通飞来飞去的，全屏的,rive:rive动画礼物, empty:不播放礼物动画的
	GiftType       string // 礼物类型字段。normal 普通消费礼物, coin 金币消费礼物,bean 金豆消费礼物;
	IncomeType     string // 礼物赠送对方收入类型。money 伴伴币, coin 金币 union_gold 联盟金币 union_active 联盟活跃值
	WithEnd        string // 对于normal是否有结束图
	Size           string // 文件大小，normal和fullscreen都是zip
	SizeBig        string //
	Ordering       string // 排序
	Deleted        string // 是否有效
	Title          string // 爵位等级
	Naming         string // 冠名
	Xratio         string //
	Xtype          string //
	Excludes       string // 过滤语言列表
	TagURL         string // 角标图片
	TagIDs         string // 物品标签,多个id以应文:隔开,如 1:2
	Description    string // 礼物描述
	JumpPage       string // 跳转url
	UnlockLimit    string // 礼物皮肤解锁限制
	ExtID          string // 扩展id,当为皮肤礼物时关联礼物id
	IsSkin         string // 0:非礼物皮肤1：礼物皮肤
	IsCombo        string // 是否是连击礼物;0:不是1:是
	Version        string //
	VapType        string // VAP礼物类型,入场,全屏
	VapSize        string // 礼物大小
	VapHeader      string // 是否带用户头像
	VapHeaderStart string // 头像出现帧
	VapHeaderEnd   string // 头像消失帧
	Magic          string // 是否魔法礼物 0否 1是
	MagicSize      string // 魔法礼物大小
	Category       string // 礼物分类 normal 普通礼物  diy diy礼物
	AppID          string // 限定app_id
	IsAppPublic    string // 是否所有app公用.0:不公用,1:公用
	SubEnable      string // 子APP启用状态，0-都展示，1-仅子APP展示，2-子APP不展示
}

var (
	// XsGift is globally public accessible object for table xs_gift operations.
	XsGift = XsGiftDao{
		M:     g.DB("default").Model("xs_gift").Safe(),
		DB:    g.DB("default"),
		Table: "xs_gift",
		Columns: xsGiftColumns{
			ID:             "id",
			Name:           "name",
			NameZhTw:       "name_zh_tw",
			NameEn:         "name_en",
			Price:          "price",
			Display:        "display",
			SubDisplay:     "sub_display",
			Type:           "type",
			GiftType:       "gift_type",
			IncomeType:     "income_type",
			WithEnd:        "with_end",
			Size:           "size",
			SizeBig:        "size_big",
			Ordering:       "ordering",
			Deleted:        "deleted",
			Title:          "title",
			Naming:         "naming",
			Xratio:         "xratio",
			Xtype:          "xtype",
			Excludes:       "excludes",
			TagURL:         "tag_url",
			TagIDs:         "tag_ids",
			Description:    "description",
			JumpPage:       "jump_page",
			UnlockLimit:    "unlock_limit",
			ExtID:          "ext_id",
			IsSkin:         "is_skin",
			IsCombo:        "is_combo",
			Version:        "version",
			VapType:        "vap_type",
			VapSize:        "vap_size",
			VapHeader:      "vap_header",
			VapHeaderStart: "vap_header_start",
			VapHeaderEnd:   "vap_header_end",
			Magic:          "magic",
			MagicSize:      "magic_size",
			Category:       "category",
			AppID:          "app_id",
			IsAppPublic:    "is_app_public",
			SubEnable:      "sub_enable",
		},
	}
)

// Ctx is a chaining function, which creates and returns a new DB that is a shallow copy
// of current DB object and with given context in it.
// Note that this returned DB object can be used only once, so do not assign it to
// a global or package variable for long using.
func (d *XsGiftDao) Ctx(ctx context.Context) *XsGiftDao {
	return &XsGiftDao{M: d.M.Ctx(ctx)}
}

// As sets an alias name for current table.
func (d *XsGiftDao) As(as string) *XsGiftDao {
	return &XsGiftDao{M: d.M.As(as)}
}

// TX sets the transaction for current operation.
func (d *XsGiftDao) TX(tx *gdb.TX) *XsGiftDao {
	return &XsGiftDao{M: d.M.TX(tx)}
}

// Master marks the following operation on master node.
func (d *XsGiftDao) Master() *XsGiftDao {
	return &XsGiftDao{M: d.M.Master()}
}

// Slave marks the following operation on slave node.
// Note that it makes sense only if there's any slave node configured.
func (d *XsGiftDao) Slave() *XsGiftDao {
	return &XsGiftDao{M: d.M.Slave()}
}

// Args sets custom arguments for model operation.
func (d *XsGiftDao) Args(args ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.Args(args...)}
}

// LeftJoin does "LEFT JOIN ... ON ..." statement on the model.
// The parameter <table> can be joined table and its joined condition,
// and also with its alias name, like:
// Table("user").LeftJoin("user_detail", "user_detail.uid=user.uid")
// Table("user", "u").LeftJoin("user_detail", "ud", "ud.uid=u.uid")
func (d *XsGiftDao) LeftJoin(table ...string) *XsGiftDao {
	return &XsGiftDao{M: d.M.LeftJoin(table...)}
}

// RightJoin does "RIGHT JOIN ... ON ..." statement on the model.
// The parameter <table> can be joined table and its joined condition,
// and also with its alias name, like:
// Table("user").RightJoin("user_detail", "user_detail.uid=user.uid")
// Table("user", "u").RightJoin("user_detail", "ud", "ud.uid=u.uid")
func (d *XsGiftDao) RightJoin(table ...string) *XsGiftDao {
	return &XsGiftDao{M: d.M.RightJoin(table...)}
}

// InnerJoin does "INNER JOIN ... ON ..." statement on the model.
// The parameter <table> can be joined table and its joined condition,
// and also with its alias name, like:
// Table("user").InnerJoin("user_detail", "user_detail.uid=user.uid")
// Table("user", "u").InnerJoin("user_detail", "ud", "ud.uid=u.uid")
func (d *XsGiftDao) InnerJoin(table ...string) *XsGiftDao {
	return &XsGiftDao{M: d.M.InnerJoin(table...)}
}

// Fields sets the operation fields of the model, multiple fields joined using char ','.
// The parameter <fieldNamesOrMapStruct> can be type of string/map/*map/struct/*struct.
func (d *XsGiftDao) Fields(fieldNamesOrMapStruct ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.Fields(fieldNamesOrMapStruct...)}
}

// FieldsEx sets the excluded operation fields of the model, multiple fields joined using char ','.
// The parameter <fieldNamesOrMapStruct> can be type of string/map/*map/struct/*struct.
func (d *XsGiftDao) FieldsEx(fieldNamesOrMapStruct ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.FieldsEx(fieldNamesOrMapStruct...)}
}

// Option sets the extra operation option for the model.
func (d *XsGiftDao) Option(option int) *XsGiftDao {
	return &XsGiftDao{M: d.M.Option(option)}
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (d *XsGiftDao) OmitEmpty() *XsGiftDao {
	return &XsGiftDao{M: d.M.OmitEmpty()}
}

// Filter marks filtering the fields which does not exist in the fields of the operated table.
func (d *XsGiftDao) Filter() *XsGiftDao {
	return &XsGiftDao{M: d.M.Filter()}
}

// Where sets the condition statement for the model. The parameter <where> can be type of
// string/map/gmap/slice/struct/*struct, etc. Note that, if it's called more than one times,
// multiple conditions will be joined into where statement using "AND".
// Eg:
// Where("uid=10000")
// Where("uid", 10000)
// Where("money>? AND name like ?", 99999, "vip_%")
// Where("uid", 1).Where("name", "john")
// Where("status IN (?)", g.Slice{1,2,3})
// Where("age IN(?,?)", 18, 50)
// Where(User{ Id : 1, UserName : "john"})
func (d *XsGiftDao) Where(where interface{}, args ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.Where(where, args...)}
}

// WherePri does the same logic as M.Where except that if the parameter <where>
// is a single condition like int/string/float/slice, it treats the condition as the primary
// key value. That is, if primary key is "id" and given <where> parameter as "123", the
// WherePri function treats the condition as "id=123", but M.Where treats the condition
// as string "123".
func (d *XsGiftDao) WherePri(where interface{}, args ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.WherePri(where, args...)}
}

// And adds "AND" condition to the where statement.
func (d *XsGiftDao) And(where interface{}, args ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.And(where, args...)}
}

// Or adds "OR" condition to the where statement.
func (d *XsGiftDao) Or(where interface{}, args ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.Or(where, args...)}
}

// Group sets the "GROUP BY" statement for the model.
func (d *XsGiftDao) Group(groupBy string) *XsGiftDao {
	return &XsGiftDao{M: d.M.Group(groupBy)}
}

// Order sets the "ORDER BY" statement for the model.
func (d *XsGiftDao) Order(orderBy ...string) *XsGiftDao {
	return &XsGiftDao{M: d.M.Order(orderBy...)}
}

// Limit sets the "LIMIT" statement for the model.
// The parameter <limit> can be either one or two number, if passed two number is passed,
// it then sets "LIMIT limit[0],limit[1]" statement for the model, or else it sets "LIMIT limit[0]"
// statement.
func (d *XsGiftDao) Limit(limit ...int) *XsGiftDao {
	return &XsGiftDao{M: d.M.Limit(limit...)}
}

// Offset sets the "OFFSET" statement for the model.
// It only makes sense for some databases like SQLServer, PostgreSQL, etc.
func (d *XsGiftDao) Offset(offset int) *XsGiftDao {
	return &XsGiftDao{M: d.M.Offset(offset)}
}

// Page sets the paging number for the model.
// The parameter <page> is started from 1 for paging.
// Note that, it differs that the Limit function start from 0 for "LIMIT" statement.
func (d *XsGiftDao) Page(page, limit int) *XsGiftDao {
	return &XsGiftDao{M: d.M.Page(page, limit)}
}

// Batch sets the batch operation number for the model.
func (d *XsGiftDao) Batch(batch int) *XsGiftDao {
	return &XsGiftDao{M: d.M.Batch(batch)}
}

// Cache sets the cache feature for the model. It caches the result of the sql, which means
// if there's another same sql request, it just reads and returns the result from cache, it
// but not committed and executed into the database.
//
// If the parameter <duration> < 0, which means it clear the cache with given <name>.
// If the parameter <duration> = 0, which means it never expires.
// If the parameter <duration> > 0, which means it expires after <duration>.
//
// The optional parameter <name> is used to bind a name to the cache, which means you can later
// control the cache like changing the <duration> or clearing the cache with specified <name>.
//
// Note that, the cache feature is disabled if the model is operating on a transaction.
func (d *XsGiftDao) Cache(duration time.Duration, name ...string) *XsGiftDao {
	return &XsGiftDao{M: d.M.Cache(duration, name...)}
}

// Data sets the operation data for the model.
// The parameter <data> can be type of string/map/gmap/slice/struct/*struct, etc.
// Eg:
// Data("uid=10000")
// Data("uid", 10000)
// Data(g.Map{"uid": 10000, "name":"john"})
// Data(g.Slice{g.Map{"uid": 10000, "name":"john"}, g.Map{"uid": 20000, "name":"smith"})
func (d *XsGiftDao) Data(data ...interface{}) *XsGiftDao {
	return &XsGiftDao{M: d.M.Data(data...)}
}

// All does "SELECT FROM ..." statement for the model.
// It retrieves the records from table and returns the result as []*pb.EntityXsGift.
// It returns nil if there's no record retrieved with the given conditions from table.
//
// The optional parameter <where> is the same as the parameter of M.Where function,
// see M.Where.
func (d *XsGiftDao) All(where ...interface{}) ([]*pb.EntityXsGift, error) {
	all, err := d.M.All(where...)
	if err != nil {
		return nil, err
	}
	var entities []*pb.EntityXsGift
	//if err = all.Structs(&entities); err != nil && err != sql.ErrNoRows {
	//	return nil, err
	//}
	if err = d.scan(all, &entities); err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return entities, nil
}

// One retrieves one record from table and returns the result as *pb.EntityXsGift.
// It returns nil if there's no record retrieved with the given conditions from table.
//
// The optional parameter <where> is the same as the parameter of M.Where function,
// see M.Where.
func (d *XsGiftDao) One(where ...interface{}) (*pb.EntityXsGift, error) {
	one, err := d.M.One(where...)
	if err != nil {
		return nil, err
	}
	var entity *pb.EntityXsGift
	if err = one.Struct(&entity); err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return entity, nil
}

// FindOne retrieves and returns a single Record by M.WherePri and M.One.
// Also see M.WherePri and M.One.
func (d *XsGiftDao) FindOne(where ...interface{}) (*pb.EntityXsGift, error) {
	one, err := d.M.FindOne(where...)
	if err != nil {
		return nil, err
	}
	var entity *pb.EntityXsGift
	if err = one.Struct(&entity); err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return entity, nil
}

// FindAll retrieves and returns Result by by M.WherePri and M.All.
// Also see M.WherePri and M.All.
func (d *XsGiftDao) FindAll(where ...interface{}) ([]*pb.EntityXsGift, error) {
	all, err := d.M.FindAll(where...)
	if err != nil {
		return nil, err
	}
	var entities []*pb.EntityXsGift
	//if err = all.Structs(&entities); err != nil && err != sql.ErrNoRows {
	//	return nil, err
	//}
	if err = d.scan(all, &entities); err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return entities, nil
}

// Struct retrieves one record from table and converts it into given struct.
// The parameter <pointer> should be type of *struct/**struct. If type **struct is given,
// it can create the struct internally during converting.
//
// The optional parameter <where> is the same as the parameter of Model.Where function,
// see Model.Where.
//
// Note that it returns sql.ErrNoRows if there's no record retrieved with the given conditions
// from table and <pointer> is not nil.
//
// Eg:
// user := new(User)
// err  := dao.User.Where("id", 1).Struct(user)
//
// user := (*User)(nil)
// err  := dao.User.Where("id", 1).Struct(&user)
func (d *XsGiftDao) Struct(pointer interface{}, where ...interface{}) error {
	return d.M.Struct(pointer, where...)
}

// Structs retrieves records from table and converts them into given struct slice.
// The parameter <pointer> should be type of *[]struct/*[]*struct. It can create and fill the struct
// slice internally during converting.
//
// The optional parameter <where> is the same as the parameter of Model.Where function,
// see Model.Where.
//
// Note that it returns sql.ErrNoRows if there's no record retrieved with the given conditions
// from table and <pointer> is not empty.
//
// Eg:
// users := ([]User)(nil)
// err   := dao.User.Structs(&users)
//
// users := ([]*User)(nil)
// err   := dao.User.Structs(&users)
func (d *XsGiftDao) Structs(pointer interface{}, where ...interface{}) error {
	return d.M.Structs(pointer, where...)
}

// Scan automatically calls Struct or Structs function according to the type of parameter <pointer>.
// It calls function Struct if <pointer> is type of *struct/**struct.
// It calls function Structs if <pointer> is type of *[]struct/*[]*struct.
//
// The optional parameter <where> is the same as the parameter of Model.Where function,
// see Model.Where.
//
// Note that it returns sql.ErrNoRows if there's no record retrieved and given pointer is not empty or nil.
//
// Eg:
// user  := new(User)
// err   := dao.User.Where("id", 1).Scan(user)
//
// user  := (*User)(nil)
// err   := dao.User.Where("id", 1).Scan(&user)
//
// users := ([]User)(nil)
// err   := dao.User.Scan(&users)
//
// users := ([]*User)(nil)
// err   := dao.User.Scan(&users)
func (d *XsGiftDao) Scan(pointer interface{}, where ...interface{}) error {
	return d.M.Scan(pointer, where...)
}

// Chunk iterates the table with given size and callback function.
func (d *XsGiftDao) Chunk(limit int, callback func(entities []*pb.EntityXsGift, err error) bool) {
	d.M.Chunk(limit, func(result gdb.Result, err error) bool {
		var entities []*pb.EntityXsGift
		err = result.Structs(&entities)
		if err == sql.ErrNoRows {
			return false
		}
		return callback(entities, err)
	})
}

// LockUpdate sets the lock for update for current operation.
func (d *XsGiftDao) LockUpdate() *XsGiftDao {
	return &XsGiftDao{M: d.M.LockUpdate()}
}

// LockShared sets the lock in share mode for current operation.
func (d *XsGiftDao) LockShared() *XsGiftDao {
	return &XsGiftDao{M: d.M.LockShared()}
}

// Unscoped enables/disables the soft deleting feature.
func (d *XsGiftDao) Unscoped() *XsGiftDao {
	return &XsGiftDao{M: d.M.Unscoped()}
}

func (d *XsGiftDao) scan(res gdb.Result, in interface{}) error {
	length := res.Len()
	if length == 0 {
		return sql.ErrNoRows
	}
	v := reflect.ValueOf(in).Elem()
	newv := reflect.MakeSlice(v.Type(), 0, length)
	v.Set(newv)
	v.SetLen(length)

	index := 0
	var fieldToTag []string
	for i := 0; i < length; i++ {
		k := v.Type().Elem().Elem()
		newObj := reflect.New(k)
		if i == 0 {
			fieldToTag = d.getFieldTag(newObj)
		}
		err := d.mapping(res[i], newObj, fieldToTag)
		if err != nil {
			return err
		}
		v.Index(index).Set(newObj)
		index++
	}
	v.SetLen(index)
	return nil
}

func (d *XsGiftDao) getFieldTag(v reflect.Value) []string {
	t := v.Type()
	typ := t.Elem()
	val := v.Elem()
	vTypeOfT := val.Type()
	length := val.NumField()
	fieldToTag := make([]string, length)
	for j := 0; j < length; j++ {
		name := vTypeOfT.Field(j).Name
		if name[0] < 'A' || name[0] > 'Z' {
			continue
		}
		value := val.Field(j)
		tagVal := typ.Field(j).Tag.Get("orm")
		if !value.CanSet() || len(tagVal) == 0 {
			continue
		}
		index := strings.Index(tagVal, ",")
		if index > -1 {
			fieldToTag[j] = tagVal[0:index]
		} else {
			fieldToTag[j] = tagVal
		}
	}
	return fieldToTag
}

func (d *XsGiftDao) mapping(m map[string]*gvar.Var, v reflect.Value, fieldToTag []string) error {
	val := v.Elem()
	length := val.NumField()
	for i := 0; i < length; i++ {
		tag := fieldToTag[i]
		if len(tag) == 0 {
			continue
		}

		meta, ok := m[tag]
		if !ok {
			continue
		}
		value := val.Field(i)
		kind := value.Kind()
		switch kind {
		case reflect.String:
			value.SetString(meta.String())
			break
		case reflect.Float32, reflect.Float64:
			value.SetFloat(meta.Float64())
			break
		case reflect.Int64, reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32:
			value.SetInt(meta.Int64())
			break
		case reflect.Uint64, reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32:
			value.SetUint(meta.Uint64())
			break
		case reflect.Bool:
			value.SetBool(meta.Bool())
			break
		default:
			return errors.New("unknown kind " + kind.String())
			break
		}
	}
	return nil
}
