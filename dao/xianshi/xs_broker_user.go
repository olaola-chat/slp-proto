// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"banban/app/pb"
	"context"

	"github.com/gogf/gf/frame/g"
)

// xsBrokerUserDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsBrokerUserDao struct {
	internal.XsBrokerUserDao
}

var (
	// XsBrokerUser is globally public accessible object for table xs_broker_user operations.
	XsBrokerUser = xsBrokerUserDao{
		internal.XsBrokerUser,
	}
)

func (serv *xsBrokerUserDao) GetOne(ctx context.Context, uid uint32) *pb.EntityXsBrokerUser {
	rec, err := serv.Ctx(ctx).Order("id DESC").FindOne("uid = ? AND deleted = 0", uid)
	if err != nil {
		g.Log().Warning("XsBrokerUser::GetOne Error: ", uid, err)
		return nil
	}

	return rec
}

// Fill with you ideas below.
// GetRecord 查询用户所属工会数据
func (serv *xsBrokerUserDao) GetRecord(ctx context.Context, uid uint32) *pb.EntityXsBrokerUser {
	if uid > 0 {
		rec := XsBrokerUser.GetOne(ctx, uid)
		if rec != nil {
			return &pb.EntityXsBrokerUser{
				Id: rec.Id, Bid: rec.Bid, Uid: rec.Uid, Deleted: rec.Deleted, State: rec.State, Exit: rec.Exit, PackCal: rec.PackCal, Sign: rec.Sign, CorpCal: rec.CorpCal, CorpStatus: rec.CorpStatus,
			}
		}
	}

	rec, err := XsBrokerUser.Ctx(ctx).Order("id DESC").FindOne("uid = ? AND deleted = 0", uid)
	if err == nil && rec != nil {
		return &pb.EntityXsBrokerUser{
			Id: rec.Id, Bid: rec.Bid, Uid: rec.Uid, Deleted: rec.Deleted, State: rec.State, PackCal: rec.PackCal,
		}
	}

	return nil
}

// GetValid 查询用户所属有效工会数据
func (serv *xsBrokerUserDao) GetValid(ctx context.Context, uid uint32) *pb.EntityXsBrokerUser {
	if uid > 0 {
		rec, err := XsBrokerUser.Ctx(ctx).FindOne("uid = ? and deleted = 0 and state=1", uid)
		if err == nil && rec != nil {
			return &pb.EntityXsBrokerUser{
				Id: rec.Id, Bid: rec.Bid, Uid: rec.Uid, Deleted: rec.Deleted, State: rec.State, Exit: rec.Exit, PackCal: rec.PackCal, Sign: rec.Sign, CorpCal: rec.CorpCal, CorpStatus: rec.CorpStatus,
			}
		}
	}

	return nil
}
