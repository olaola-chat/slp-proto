// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"banban/app/dao/internal"
	"context"
	"fmt"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/errors/gerror"
	"strings"
	"time"
)

// xsUserActivateLotteryInfoDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type xsUserActivateLotteryInfoDao struct {
	internal.XsUserActivateLotteryInfoDao
}

var (
	// XsUserActivateLotteryInfo is globally public accessible object for table xs_user_activate_lottery_info operations.
	XsUserActivateLotteryInfo = xsUserActivateLotteryInfoDao{
		internal.XsUserActivateLotteryInfo,
	}
)

// Fill with you ideas below.

func (b *xsUserActivateLotteryInfoDao) MultipleIncByFiled(ctx context.Context, fileMapList []map[string]int64) (int64, error) {
	var err error
	if len(fileMapList) <= 0 {
		return 0, gerror.New("参数错误")
	}

	createTime := time.Now().Unix()
	valueStr := ""

	for _, v := range fileMapList {
		if nv, ok := v["uid"]; !ok || nv <= 0 {
			return 0, gerror.New("缺少uid")
		}

		if np, ok := v["pool_id"]; !ok || np <= 0 {
			return 0, gerror.New("缺少pool_id")
		}

		if nn, ok := v["pick_num"]; !ok || nn < 0 {
			return 0, gerror.New("缺少pick_num")
		}

		valueStr += fmt.Sprintf("(%d,%d,%d,%d),", v["uid"], v["pool_id"], v["pick_num"], createTime)
	}

	valueStr = strings.Trim(valueStr, ",")

	text := `
	INSERT INTO xs_user_activate_lottery_info (uid,pool_id,pick_num,create_time) 
VALUES %s ON DUPLICATE KEY UPDATE pick_num=pick_num+values(pick_num), update_time=%d;
	`

	sql := fmt.Sprintf(text, valueStr, createTime)
	r, err := b.DB.Ctx(ctx).Exec(sql)
	if err != nil {
		return 0, err
	}
	id, err := r.LastInsertId()
	return id, err
}

// 用事务的插入
func (b *xsUserActivateLotteryInfoDao) MultipleIncByFiledWithTx(ctx context.Context, tx *gdb.TX, fileMapList []map[string]int64) (int64, error) {
	var err error

	if len(fileMapList) <= 0 {
		return 0, gerror.New("参数错误")
	}

	createTime := time.Now().Unix()
	valueStr := ""

	for _, v := range fileMapList {
		if nv, ok := v["uid"]; !ok || nv <= 0 {
			return 0, gerror.New("缺少uid")
		}

		if np, ok := v["pool_id"]; !ok || np <= 0 {
			return 0, gerror.New("缺少pool_id")
		}

		if nn, ok := v["pick_num"]; !ok || nn <= 0 {
			return 0, gerror.New("缺少pick_num")
		}
		valueStr += fmt.Sprintf("(%d,%d,%d,%d),", v["uid"], v["pool_id"], v["pick_num"], createTime)
	}

	valueStr = strings.Trim(valueStr, ",")

	text := `
	INSERT INTO xs_user_activate_lottery_info (uid,pool_id,pick_num,create_time) 
VALUES %s ON DUPLICATE KEY UPDATE pick_num=pick_num+values(pick_num),update_time=%d;
	`
	sql := fmt.Sprintf(text, valueStr, createTime)
	r, err := tx.Exec(sql)
	if err != nil {
		return 0, err
	}
	id, err := r.LastInsertId()
	return id, err
}
